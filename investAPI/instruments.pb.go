// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.2
// source: instruments.proto

package investAPI

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//Тип идентификатора инструмента. Подробнее об идентификации инструментов: [Идентификация инструментов](/investAPI/faq_identification/)
type InstrumentIdType int32

const (
	InstrumentIdType_INSTRUMENT_ID_UNSPECIFIED InstrumentIdType = 0 //Значение не определено.
	InstrumentIdType_INSTRUMENT_ID_TYPE_FIGI   InstrumentIdType = 1 //Figi.
	InstrumentIdType_INSTRUMENT_ID_TYPE_TICKER InstrumentIdType = 2 //Ticker.
)

// Enum value maps for InstrumentIdType.
var (
	InstrumentIdType_name = map[int32]string{
		0: "INSTRUMENT_ID_UNSPECIFIED",
		1: "INSTRUMENT_ID_TYPE_FIGI",
		2: "INSTRUMENT_ID_TYPE_TICKER",
	}
	InstrumentIdType_value = map[string]int32{
		"INSTRUMENT_ID_UNSPECIFIED": 0,
		"INSTRUMENT_ID_TYPE_FIGI":   1,
		"INSTRUMENT_ID_TYPE_TICKER": 2,
	}
)

func (x InstrumentIdType) Enum() *InstrumentIdType {
	p := new(InstrumentIdType)
	*p = x
	return p
}

func (x InstrumentIdType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstrumentIdType) Descriptor() protoreflect.EnumDescriptor {
	return file_instruments_proto_enumTypes[0].Descriptor()
}

func (InstrumentIdType) Type() protoreflect.EnumType {
	return &file_instruments_proto_enumTypes[0]
}

func (x InstrumentIdType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstrumentIdType.Descriptor instead.
func (InstrumentIdType) EnumDescriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{0}
}

//Статус запрашиваемых инструментов.
type InstrumentStatus int32

const (
	InstrumentStatus_INSTRUMENT_STATUS_UNSPECIFIED InstrumentStatus = 0 //Значение не определено.
	InstrumentStatus_INSTRUMENT_STATUS_BASE        InstrumentStatus = 1 //Базовый список инструментов (по умолчанию).
	InstrumentStatus_INSTRUMENT_STATUS_ALL         InstrumentStatus = 2 //Список всех инструментов.
)

// Enum value maps for InstrumentStatus.
var (
	InstrumentStatus_name = map[int32]string{
		0: "INSTRUMENT_STATUS_UNSPECIFIED",
		1: "INSTRUMENT_STATUS_BASE",
		2: "INSTRUMENT_STATUS_ALL",
	}
	InstrumentStatus_value = map[string]int32{
		"INSTRUMENT_STATUS_UNSPECIFIED": 0,
		"INSTRUMENT_STATUS_BASE":        1,
		"INSTRUMENT_STATUS_ALL":         2,
	}
)

func (x InstrumentStatus) Enum() *InstrumentStatus {
	p := new(InstrumentStatus)
	*p = x
	return p
}

func (x InstrumentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstrumentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_instruments_proto_enumTypes[1].Descriptor()
}

func (InstrumentStatus) Type() protoreflect.EnumType {
	return &file_instruments_proto_enumTypes[1]
}

func (x InstrumentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstrumentStatus.Descriptor instead.
func (InstrumentStatus) EnumDescriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{1}
}

type ShareType int32

const (
	ShareType_SHARE_TYPE_UNSPECIFIED     ShareType = 0 //Значение не определено.
	ShareType_SHARE_TYPE_COMMON          ShareType = 1 //Обыкновенная
	ShareType_SHARE_TYPE_PREFERRED       ShareType = 2 //Привилегированная
	ShareType_SHARE_TYPE_ADR             ShareType = 3 //Американские депозитарные расписки
	ShareType_SHARE_TYPE_GDR             ShareType = 4 //Глобальные депозитарные расписки
	ShareType_SHARE_TYPE_MLP             ShareType = 5 //Товарищество с ограниченной ответственностью
	ShareType_SHARE_TYPE_NY_REG_SHRS     ShareType = 6 //Акции из реестра Нью-Йорка
	ShareType_SHARE_TYPE_CLOSED_END_FUND ShareType = 7 //Закрытый инвестиционный фонд
	ShareType_SHARE_TYPE_REIT            ShareType = 8 //Траст недвижимости
)

// Enum value maps for ShareType.
var (
	ShareType_name = map[int32]string{
		0: "SHARE_TYPE_UNSPECIFIED",
		1: "SHARE_TYPE_COMMON",
		2: "SHARE_TYPE_PREFERRED",
		3: "SHARE_TYPE_ADR",
		4: "SHARE_TYPE_GDR",
		5: "SHARE_TYPE_MLP",
		6: "SHARE_TYPE_NY_REG_SHRS",
		7: "SHARE_TYPE_CLOSED_END_FUND",
		8: "SHARE_TYPE_REIT",
	}
	ShareType_value = map[string]int32{
		"SHARE_TYPE_UNSPECIFIED":     0,
		"SHARE_TYPE_COMMON":          1,
		"SHARE_TYPE_PREFERRED":       2,
		"SHARE_TYPE_ADR":             3,
		"SHARE_TYPE_GDR":             4,
		"SHARE_TYPE_MLP":             5,
		"SHARE_TYPE_NY_REG_SHRS":     6,
		"SHARE_TYPE_CLOSED_END_FUND": 7,
		"SHARE_TYPE_REIT":            8,
	}
)

func (x ShareType) Enum() *ShareType {
	p := new(ShareType)
	*p = x
	return p
}

func (x ShareType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShareType) Descriptor() protoreflect.EnumDescriptor {
	return file_instruments_proto_enumTypes[2].Descriptor()
}

func (ShareType) Type() protoreflect.EnumType {
	return &file_instruments_proto_enumTypes[2]
}

func (x ShareType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShareType.Descriptor instead.
func (ShareType) EnumDescriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{2}
}

type TradingSchedulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchange string                 `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"` // Наименование биржи или расчетного календаря. </br>Если не передаётся, возвращается информация по всем доступным торговым площадкам.
	From     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`         // Начало периода по часовому поясу UTC.
	To       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`             // Окончание периода по часовому поясу UTC.
}

func (x *TradingSchedulesRequest) Reset() {
	*x = TradingSchedulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradingSchedulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingSchedulesRequest) ProtoMessage() {}

func (x *TradingSchedulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingSchedulesRequest.ProtoReflect.Descriptor instead.
func (*TradingSchedulesRequest) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{0}
}

func (x *TradingSchedulesRequest) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *TradingSchedulesRequest) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *TradingSchedulesRequest) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

type TradingSchedulesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchanges []*TradingSchedule `protobuf:"bytes,1,rep,name=exchanges,proto3" json:"exchanges,omitempty"` // Список торговых площадок и режимов торгов.
}

func (x *TradingSchedulesResponse) Reset() {
	*x = TradingSchedulesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradingSchedulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingSchedulesResponse) ProtoMessage() {}

func (x *TradingSchedulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingSchedulesResponse.ProtoReflect.Descriptor instead.
func (*TradingSchedulesResponse) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{1}
}

func (x *TradingSchedulesResponse) GetExchanges() []*TradingSchedule {
	if x != nil {
		return x.Exchanges
	}
	return nil
}

// Данные по торговой площадке.
type TradingSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchange string        `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"` // Наименование торговой площадки.
	Days     []*TradingDay `protobuf:"bytes,2,rep,name=days,proto3" json:"days,omitempty"`         // Массив с торговыми и неторговыми днями.
}

func (x *TradingSchedule) Reset() {
	*x = TradingSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradingSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingSchedule) ProtoMessage() {}

func (x *TradingSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingSchedule.ProtoReflect.Descriptor instead.
func (*TradingSchedule) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{2}
}

func (x *TradingSchedule) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *TradingSchedule) GetDays() []*TradingDay {
	if x != nil {
		return x.Days
	}
	return nil
}

// Информация о времени торгов.
type TradingDay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date                 *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`                                                                 // Дата.
	IsTradingDay         bool                   `protobuf:"varint,2,opt,name=is_trading_day,json=isTradingDay,proto3" json:"is_trading_day,omitempty"`                          // Признак торгового дня на бирже.
	StartTime            *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                      // Время начала торгов по часовому поясу UTC.
	EndTime              *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                            // Время окончания торгов по часовому поясу UTC.
	MarketOrderStartTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=market_order_start_time,json=marketOrderStartTime,proto3" json:"market_order_start_time,omitempty"` // Время начала подачи заявки по часовому поясу UTC.
	MarketOrderEndTime   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=market_order_end_time,json=marketOrderEndTime,proto3" json:"market_order_end_time,omitempty"`       // Время окончания подачи заявки по часовому поясу UTC.
}

func (x *TradingDay) Reset() {
	*x = TradingDay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradingDay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingDay) ProtoMessage() {}

func (x *TradingDay) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingDay.ProtoReflect.Descriptor instead.
func (*TradingDay) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{3}
}

func (x *TradingDay) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *TradingDay) GetIsTradingDay() bool {
	if x != nil {
		return x.IsTradingDay
	}
	return false
}

func (x *TradingDay) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *TradingDay) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *TradingDay) GetMarketOrderStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.MarketOrderStartTime
	}
	return nil
}

func (x *TradingDay) GetMarketOrderEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.MarketOrderEndTime
	}
	return nil
}

//Запрос получения инструмента по идентификатору.
type InstrumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdType    InstrumentIdType `protobuf:"varint,1,opt,name=id_type,json=idType,proto3,enum=tinkoff.public.invest.api.contract.v1.InstrumentIdType" json:"id_type,omitempty"` // Тип идентификатора инструмента. Возможные значения: figi, ticker, isin. Подробнее об идентификации инструментов: [Идентификация инструментов](/investAPI/faq_identification/)
	ClassCode string           `protobuf:"bytes,2,opt,name=class_code,json=classCode,proto3" json:"class_code,omitempty"`                                                     // Идентификатор class_code. Обязателен при id_type = ticker.
	Id        string           `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`                                                                                    // Идентификатор запрашиваемого инструмента.
}

func (x *InstrumentRequest) Reset() {
	*x = InstrumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentRequest) ProtoMessage() {}

func (x *InstrumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentRequest.ProtoReflect.Descriptor instead.
func (*InstrumentRequest) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{4}
}

func (x *InstrumentRequest) GetIdType() InstrumentIdType {
	if x != nil {
		return x.IdType
	}
	return InstrumentIdType_INSTRUMENT_ID_UNSPECIFIED
}

func (x *InstrumentRequest) GetClassCode() string {
	if x != nil {
		return x.ClassCode
	}
	return ""
}

func (x *InstrumentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

//Запрос получения инструментов.
type InstrumentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstrumentStatus InstrumentStatus `protobuf:"varint,1,opt,name=instrument_status,json=instrumentStatus,proto3,enum=tinkoff.public.invest.api.contract.v1.InstrumentStatus" json:"instrument_status,omitempty"` //Статус запрашиваемых инструментов. Возможные значения: [InstrumentStatus](#instrumentstatus)
}

func (x *InstrumentsRequest) Reset() {
	*x = InstrumentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentsRequest) ProtoMessage() {}

func (x *InstrumentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentsRequest.ProtoReflect.Descriptor instead.
func (*InstrumentsRequest) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{5}
}

func (x *InstrumentsRequest) GetInstrumentStatus() InstrumentStatus {
	if x != nil {
		return x.InstrumentStatus
	}
	return InstrumentStatus_INSTRUMENT_STATUS_UNSPECIFIED
}

//Информация об облигации.
type BondResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instrument *Bond `protobuf:"bytes,1,opt,name=instrument,proto3" json:"instrument,omitempty"` // Информация об облигации.
}

func (x *BondResponse) Reset() {
	*x = BondResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BondResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BondResponse) ProtoMessage() {}

func (x *BondResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BondResponse.ProtoReflect.Descriptor instead.
func (*BondResponse) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{6}
}

func (x *BondResponse) GetInstrument() *Bond {
	if x != nil {
		return x.Instrument
	}
	return nil
}

//Список облигаций.
type BondsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instruments []*Bond `protobuf:"bytes,1,rep,name=instruments,proto3" json:"instruments,omitempty"` //Массив облигаций.
}

func (x *BondsResponse) Reset() {
	*x = BondsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BondsResponse) ProtoMessage() {}

func (x *BondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BondsResponse.ProtoReflect.Descriptor instead.
func (*BondsResponse) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{7}
}

func (x *BondsResponse) GetInstruments() []*Bond {
	if x != nil {
		return x.Instruments
	}
	return nil
}

//Данные по валюте.
type CurrencyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instrument *Currency `protobuf:"bytes,1,opt,name=instrument,proto3" json:"instrument,omitempty"` // Информация о валюте.
}

func (x *CurrencyResponse) Reset() {
	*x = CurrencyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyResponse) ProtoMessage() {}

func (x *CurrencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyResponse.ProtoReflect.Descriptor instead.
func (*CurrencyResponse) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{8}
}

func (x *CurrencyResponse) GetInstrument() *Currency {
	if x != nil {
		return x.Instrument
	}
	return nil
}

//Данные по валютам.
type CurrenciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instruments []*Currency `protobuf:"bytes,1,rep,name=instruments,proto3" json:"instruments,omitempty"` //Массив валют.
}

func (x *CurrenciesResponse) Reset() {
	*x = CurrenciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrenciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrenciesResponse) ProtoMessage() {}

func (x *CurrenciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrenciesResponse.ProtoReflect.Descriptor instead.
func (*CurrenciesResponse) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{9}
}

func (x *CurrenciesResponse) GetInstruments() []*Currency {
	if x != nil {
		return x.Instruments
	}
	return nil
}

//Данные по фонду.
type EtfResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instrument *Etf `protobuf:"bytes,1,opt,name=instrument,proto3" json:"instrument,omitempty"` // Информация о фонде.
}

func (x *EtfResponse) Reset() {
	*x = EtfResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EtfResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EtfResponse) ProtoMessage() {}

func (x *EtfResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EtfResponse.ProtoReflect.Descriptor instead.
func (*EtfResponse) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{10}
}

func (x *EtfResponse) GetInstrument() *Etf {
	if x != nil {
		return x.Instrument
	}
	return nil
}

//Данные по фондам.
type EtfsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instruments []*Etf `protobuf:"bytes,1,rep,name=instruments,proto3" json:"instruments,omitempty"` //Массив фондов.
}

func (x *EtfsResponse) Reset() {
	*x = EtfsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EtfsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EtfsResponse) ProtoMessage() {}

func (x *EtfsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EtfsResponse.ProtoReflect.Descriptor instead.
func (*EtfsResponse) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{11}
}

func (x *EtfsResponse) GetInstruments() []*Etf {
	if x != nil {
		return x.Instruments
	}
	return nil
}

//Данные по фьючерсу.
type FutureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instrument *Future `protobuf:"bytes,1,opt,name=instrument,proto3" json:"instrument,omitempty"` // Информация о фьючерсу.
}

func (x *FutureResponse) Reset() {
	*x = FutureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FutureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FutureResponse) ProtoMessage() {}

func (x *FutureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FutureResponse.ProtoReflect.Descriptor instead.
func (*FutureResponse) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{12}
}

func (x *FutureResponse) GetInstrument() *Future {
	if x != nil {
		return x.Instrument
	}
	return nil
}

//Данные по фьючерсам.
type FuturesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instruments []*Future `protobuf:"bytes,1,rep,name=instruments,proto3" json:"instruments,omitempty"` //Массив фьючерсов.
}

func (x *FuturesResponse) Reset() {
	*x = FuturesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuturesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuturesResponse) ProtoMessage() {}

func (x *FuturesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuturesResponse.ProtoReflect.Descriptor instead.
func (*FuturesResponse) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{13}
}

func (x *FuturesResponse) GetInstruments() []*Future {
	if x != nil {
		return x.Instruments
	}
	return nil
}

//Данные по акции.
type ShareResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instrument *Share `protobuf:"bytes,1,opt,name=instrument,proto3" json:"instrument,omitempty"` // Информация об акции.
}

func (x *ShareResponse) Reset() {
	*x = ShareResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareResponse) ProtoMessage() {}

func (x *ShareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareResponse.ProtoReflect.Descriptor instead.
func (*ShareResponse) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{14}
}

func (x *ShareResponse) GetInstrument() *Share {
	if x != nil {
		return x.Instrument
	}
	return nil
}

//Данные по акциям.
type SharesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instruments []*Share `protobuf:"bytes,1,rep,name=instruments,proto3" json:"instruments,omitempty"` //Массив акций.
}

func (x *SharesResponse) Reset() {
	*x = SharesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharesResponse) ProtoMessage() {}

func (x *SharesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharesResponse.ProtoReflect.Descriptor instead.
func (*SharesResponse) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{15}
}

func (x *SharesResponse) GetInstruments() []*Share {
	if x != nil {
		return x.Instruments
	}
	return nil
}

//Объект передачи информации об облигации.
type Bond struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Figi                  string                 `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                                                                                           //Figi-идентификатор инструмента.
	Ticker                string                 `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`                                                                                                       //Тикер инструмента.
	ClassCode             string                 `protobuf:"bytes,3,opt,name=class_code,json=classCode,proto3" json:"class_code,omitempty"`                                                                                //Класс-код (секция торгов).
	Isin                  string                 `protobuf:"bytes,4,opt,name=isin,proto3" json:"isin,omitempty"`                                                                                                           //Isin-идентификатор инструмента.
	Lot                   int32                  `protobuf:"varint,5,opt,name=lot,proto3" json:"lot,omitempty"`                                                                                                            //Лотность инструмента. Возможно совершение операций только на количества ценной бумаги, кратные параметру *lot*. Подробнее: [лот](/investAPI/glossary#lot)
	Currency              string                 `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"`                                                                                                   //Валюта расчётов.
	Klong                 float64                `protobuf:"fixed64,7,opt,name=klong,proto3" json:"klong,omitempty"`                                                                                                       //Коэффициент ставки риска длинной позиции по инструменту.
	Kshort                float64                `protobuf:"fixed64,8,opt,name=kshort,proto3" json:"kshort,omitempty"`                                                                                                     //Коэффициент ставки риска короткой позиции по инструменту.
	Dlong                 float64                `protobuf:"fixed64,9,opt,name=dlong,proto3" json:"dlong,omitempty"`                                                                                                       //Ставка риска минимальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
	Dshort                float64                `protobuf:"fixed64,10,opt,name=dshort,proto3" json:"dshort,omitempty"`                                                                                                    //Ставка риска минимальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
	DlongMin              float64                `protobuf:"fixed64,11,opt,name=dlong_min,json=dlongMin,proto3" json:"dlong_min,omitempty"`                                                                                //Ставка риска начальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
	DshortMin             float64                `protobuf:"fixed64,12,opt,name=dshort_min,json=dshortMin,proto3" json:"dshort_min,omitempty"`                                                                             //Ставка риска начальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
	ShortEnabledFlag      bool                   `protobuf:"varint,13,opt,name=short_enabled_flag,json=shortEnabledFlag,proto3" json:"short_enabled_flag,omitempty"`                                                       //Признак доступности для операций в шорт.
	Name                  string                 `protobuf:"bytes,15,opt,name=name,proto3" json:"name,omitempty"`                                                                                                          //Название инструмента.
	Exchange              string                 `protobuf:"bytes,16,opt,name=exchange,proto3" json:"exchange,omitempty"`                                                                                                  //Торговая площадка.
	CouponQuantityPerYear int32                  `protobuf:"varint,17,opt,name=coupon_quantity_per_year,json=couponQuantityPerYear,proto3" json:"coupon_quantity_per_year,omitempty"`                                      //Количество выплат по купонам в год.
	MaturityDate          *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=maturity_date,json=maturityDate,proto3" json:"maturity_date,omitempty"`                                                                      //Дата погашения облигации в часовом поясе UTC.
	Nominal               *MoneyValue            `protobuf:"bytes,19,opt,name=nominal,proto3" json:"nominal,omitempty"`                                                                                                    //Номинал облигации.
	StateRegDate          *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=state_reg_date,json=stateRegDate,proto3" json:"state_reg_date,omitempty"`                                                                    //Дата выпуска облигации в часовом поясе UTC.
	PlacementDate         *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=placement_date,json=placementDate,proto3" json:"placement_date,omitempty"`                                                                   //Дата размещения в часовом поясе UTC.
	PlacementPrice        *MoneyValue            `protobuf:"bytes,23,opt,name=placement_price,json=placementPrice,proto3" json:"placement_price,omitempty"`                                                                //Цена размещения.
	AciValue              *MoneyValue            `protobuf:"bytes,24,opt,name=aci_value,json=aciValue,proto3" json:"aci_value,omitempty"`                                                                                  //Значение НКД (накопленного купонного дохода) на дату.
	CountryOfRisk         string                 `protobuf:"bytes,25,opt,name=country_of_risk,json=countryOfRisk,proto3" json:"country_of_risk,omitempty"`                                                                 //Код страны эмитента.
	CountryOfRiskName     string                 `protobuf:"bytes,26,opt,name=country_of_risk_name,json=countryOfRiskName,proto3" json:"country_of_risk_name,omitempty"`                                                   //Наименование страны эмитента.
	Sector                string                 `protobuf:"bytes,27,opt,name=sector,proto3" json:"sector,omitempty"`                                                                                                      //Сектор экономики.
	IssueKind             string                 `protobuf:"bytes,28,opt,name=issue_kind,json=issueKind,proto3" json:"issue_kind,omitempty"`                                                                               //Форма выпуска. Возможные значения: </br>**documentary** — документарная; </br>**non_documentary** — бездокументарная.
	IssueSize             int64                  `protobuf:"varint,29,opt,name=issue_size,json=issueSize,proto3" json:"issue_size,omitempty"`                                                                              //Размер выпуска.
	IssueSizePlan         int64                  `protobuf:"varint,30,opt,name=issue_size_plan,json=issueSizePlan,proto3" json:"issue_size_plan,omitempty"`                                                                //Плановый размер выпуска.
	TradingStatus         SecurityTradingStatus  `protobuf:"varint,31,opt,name=trading_status,json=tradingStatus,proto3,enum=tinkoff.public.invest.api.contract.v1.SecurityTradingStatus" json:"trading_status,omitempty"` //Текущий режим торгов инструмента.
	OtcFlag               bool                   `protobuf:"varint,32,opt,name=otc_flag,json=otcFlag,proto3" json:"otc_flag,omitempty"`                                                                                    //Признак внебиржевой ценной бумаги.
	BuyAvailableFlag      bool                   `protobuf:"varint,33,opt,name=buy_available_flag,json=buyAvailableFlag,proto3" json:"buy_available_flag,omitempty"`                                                       //Признак доступности для покупки.
	SellAvailableFlag     bool                   `protobuf:"varint,34,opt,name=sell_available_flag,json=sellAvailableFlag,proto3" json:"sell_available_flag,omitempty"`                                                    //Признак доступности для продажи.
	FloatingCouponFlag    bool                   `protobuf:"varint,35,opt,name=floating_coupon_flag,json=floatingCouponFlag,proto3" json:"floating_coupon_flag,omitempty"`                                                 //Признак облигации с плавающим купоном.
	PerpetualFlag         bool                   `protobuf:"varint,36,opt,name=perpetual_flag,json=perpetualFlag,proto3" json:"perpetual_flag,omitempty"`                                                                  //Признак бессрочной облигации.
	AmortizationFlag      bool                   `protobuf:"varint,37,opt,name=amortization_flag,json=amortizationFlag,proto3" json:"amortization_flag,omitempty"`                                                         //Признак облигации с амортизацией долга.
	MinPriceIncrement     float32                `protobuf:"fixed32,38,opt,name=min_price_increment,json=minPriceIncrement,proto3" json:"min_price_increment,omitempty"`                                                   //Шаг цены.
	ApiTradeAvailableFlag bool                   `protobuf:"varint,39,opt,name=api_trade_available_flag,json=apiTradeAvailableFlag,proto3" json:"api_trade_available_flag,omitempty"`                                      //Признак доступности торгов через API.
}

func (x *Bond) Reset() {
	*x = Bond{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bond) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bond) ProtoMessage() {}

func (x *Bond) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bond.ProtoReflect.Descriptor instead.
func (*Bond) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{16}
}

func (x *Bond) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *Bond) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *Bond) GetClassCode() string {
	if x != nil {
		return x.ClassCode
	}
	return ""
}

func (x *Bond) GetIsin() string {
	if x != nil {
		return x.Isin
	}
	return ""
}

func (x *Bond) GetLot() int32 {
	if x != nil {
		return x.Lot
	}
	return 0
}

func (x *Bond) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Bond) GetKlong() float64 {
	if x != nil {
		return x.Klong
	}
	return 0
}

func (x *Bond) GetKshort() float64 {
	if x != nil {
		return x.Kshort
	}
	return 0
}

func (x *Bond) GetDlong() float64 {
	if x != nil {
		return x.Dlong
	}
	return 0
}

func (x *Bond) GetDshort() float64 {
	if x != nil {
		return x.Dshort
	}
	return 0
}

func (x *Bond) GetDlongMin() float64 {
	if x != nil {
		return x.DlongMin
	}
	return 0
}

func (x *Bond) GetDshortMin() float64 {
	if x != nil {
		return x.DshortMin
	}
	return 0
}

func (x *Bond) GetShortEnabledFlag() bool {
	if x != nil {
		return x.ShortEnabledFlag
	}
	return false
}

func (x *Bond) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Bond) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *Bond) GetCouponQuantityPerYear() int32 {
	if x != nil {
		return x.CouponQuantityPerYear
	}
	return 0
}

func (x *Bond) GetMaturityDate() *timestamppb.Timestamp {
	if x != nil {
		return x.MaturityDate
	}
	return nil
}

func (x *Bond) GetNominal() *MoneyValue {
	if x != nil {
		return x.Nominal
	}
	return nil
}

func (x *Bond) GetStateRegDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StateRegDate
	}
	return nil
}

func (x *Bond) GetPlacementDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PlacementDate
	}
	return nil
}

func (x *Bond) GetPlacementPrice() *MoneyValue {
	if x != nil {
		return x.PlacementPrice
	}
	return nil
}

func (x *Bond) GetAciValue() *MoneyValue {
	if x != nil {
		return x.AciValue
	}
	return nil
}

func (x *Bond) GetCountryOfRisk() string {
	if x != nil {
		return x.CountryOfRisk
	}
	return ""
}

func (x *Bond) GetCountryOfRiskName() string {
	if x != nil {
		return x.CountryOfRiskName
	}
	return ""
}

func (x *Bond) GetSector() string {
	if x != nil {
		return x.Sector
	}
	return ""
}

func (x *Bond) GetIssueKind() string {
	if x != nil {
		return x.IssueKind
	}
	return ""
}

func (x *Bond) GetIssueSize() int64 {
	if x != nil {
		return x.IssueSize
	}
	return 0
}

func (x *Bond) GetIssueSizePlan() int64 {
	if x != nil {
		return x.IssueSizePlan
	}
	return 0
}

func (x *Bond) GetTradingStatus() SecurityTradingStatus {
	if x != nil {
		return x.TradingStatus
	}
	return SecurityTradingStatus_SECURITY_TRADING_STATUS_UNSPECIFIED
}

func (x *Bond) GetOtcFlag() bool {
	if x != nil {
		return x.OtcFlag
	}
	return false
}

func (x *Bond) GetBuyAvailableFlag() bool {
	if x != nil {
		return x.BuyAvailableFlag
	}
	return false
}

func (x *Bond) GetSellAvailableFlag() bool {
	if x != nil {
		return x.SellAvailableFlag
	}
	return false
}

func (x *Bond) GetFloatingCouponFlag() bool {
	if x != nil {
		return x.FloatingCouponFlag
	}
	return false
}

func (x *Bond) GetPerpetualFlag() bool {
	if x != nil {
		return x.PerpetualFlag
	}
	return false
}

func (x *Bond) GetAmortizationFlag() bool {
	if x != nil {
		return x.AmortizationFlag
	}
	return false
}

func (x *Bond) GetMinPriceIncrement() float32 {
	if x != nil {
		return x.MinPriceIncrement
	}
	return 0
}

func (x *Bond) GetApiTradeAvailableFlag() bool {
	if x != nil {
		return x.ApiTradeAvailableFlag
	}
	return false
}

//Объект передачи информации о валюте.
type Currency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Figi                  string                `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                                                                                           //Figi-идентификатор инструмента.
	Ticker                string                `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`                                                                                                       //Тикер инструмента.
	ClassCode             string                `protobuf:"bytes,3,opt,name=class_code,json=classCode,proto3" json:"class_code,omitempty"`                                                                                //Класс-код (секция торгов).
	Isin                  string                `protobuf:"bytes,4,opt,name=isin,proto3" json:"isin,omitempty"`                                                                                                           //Isin-идентификатор инструмента.
	Lot                   int32                 `protobuf:"varint,5,opt,name=lot,proto3" json:"lot,omitempty"`                                                                                                            //Лотность инструмента. Возможно совершение операций только на количества ценной бумаги, кратные параметру *lot*. Подробнее: [лот](/investAPI/glossary#lot)
	Currency              string                `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"`                                                                                                   //Валюта расчётов.
	Klong                 float64               `protobuf:"fixed64,7,opt,name=klong,proto3" json:"klong,omitempty"`                                                                                                       //Коэффициент ставки риска длинной позиции по инструменту.
	Kshort                float64               `protobuf:"fixed64,8,opt,name=kshort,proto3" json:"kshort,omitempty"`                                                                                                     //Коэффициент ставки риска короткой позиции по инструменту.
	Dlong                 float64               `protobuf:"fixed64,9,opt,name=dlong,proto3" json:"dlong,omitempty"`                                                                                                       //Ставка риска минимальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
	Dshort                float64               `protobuf:"fixed64,10,opt,name=dshort,proto3" json:"dshort,omitempty"`                                                                                                    //Ставка риска минимальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
	DlongMin              float64               `protobuf:"fixed64,11,opt,name=dlong_min,json=dlongMin,proto3" json:"dlong_min,omitempty"`                                                                                //Ставка риска начальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
	DshortMin             float64               `protobuf:"fixed64,12,opt,name=dshort_min,json=dshortMin,proto3" json:"dshort_min,omitempty"`                                                                             //Ставка риска начальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
	ShortEnabledFlag      bool                  `protobuf:"varint,13,opt,name=short_enabled_flag,json=shortEnabledFlag,proto3" json:"short_enabled_flag,omitempty"`                                                       //Признак доступности для операций в шорт.
	Name                  string                `protobuf:"bytes,15,opt,name=name,proto3" json:"name,omitempty"`                                                                                                          //Название инструмента.
	Exchange              string                `protobuf:"bytes,16,opt,name=exchange,proto3" json:"exchange,omitempty"`                                                                                                  //Торговая площадка.
	Nominal               *MoneyValue           `protobuf:"bytes,17,opt,name=nominal,proto3" json:"nominal,omitempty"`                                                                                                    //Номинал.
	CountryOfRisk         string                `protobuf:"bytes,18,opt,name=country_of_risk,json=countryOfRisk,proto3" json:"country_of_risk,omitempty"`                                                                 //Код страны эмитента.
	CountryOfRiskName     string                `protobuf:"bytes,19,opt,name=country_of_risk_name,json=countryOfRiskName,proto3" json:"country_of_risk_name,omitempty"`                                                   //Наименование страны эмитента.
	TradingStatus         SecurityTradingStatus `protobuf:"varint,20,opt,name=trading_status,json=tradingStatus,proto3,enum=tinkoff.public.invest.api.contract.v1.SecurityTradingStatus" json:"trading_status,omitempty"` //Текущий режим торгов инструмента.
	OtcFlag               bool                  `protobuf:"varint,21,opt,name=otc_flag,json=otcFlag,proto3" json:"otc_flag,omitempty"`                                                                                    //Признак внебиржевой ценной бумаги.
	BuyAvailableFlag      bool                  `protobuf:"varint,22,opt,name=buy_available_flag,json=buyAvailableFlag,proto3" json:"buy_available_flag,omitempty"`                                                       //Признак доступности для покупки.
	SellAvailableFlag     bool                  `protobuf:"varint,23,opt,name=sell_available_flag,json=sellAvailableFlag,proto3" json:"sell_available_flag,omitempty"`                                                    //Признак доступности для продажи.
	IsoCurrencyName       string                `protobuf:"bytes,24,opt,name=iso_currency_name,json=isoCurrencyName,proto3" json:"iso_currency_name,omitempty"`                                                           //Строковый ISO-код валюты.
	MinPriceIncrement     float32               `protobuf:"fixed32,25,opt,name=min_price_increment,json=minPriceIncrement,proto3" json:"min_price_increment,omitempty"`                                                   //Шаг цены.
	ApiTradeAvailableFlag bool                  `protobuf:"varint,26,opt,name=api_trade_available_flag,json=apiTradeAvailableFlag,proto3" json:"api_trade_available_flag,omitempty"`                                      //Признак доступности торгов через API.
}

func (x *Currency) Reset() {
	*x = Currency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Currency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Currency) ProtoMessage() {}

func (x *Currency) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Currency.ProtoReflect.Descriptor instead.
func (*Currency) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{17}
}

func (x *Currency) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *Currency) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *Currency) GetClassCode() string {
	if x != nil {
		return x.ClassCode
	}
	return ""
}

func (x *Currency) GetIsin() string {
	if x != nil {
		return x.Isin
	}
	return ""
}

func (x *Currency) GetLot() int32 {
	if x != nil {
		return x.Lot
	}
	return 0
}

func (x *Currency) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Currency) GetKlong() float64 {
	if x != nil {
		return x.Klong
	}
	return 0
}

func (x *Currency) GetKshort() float64 {
	if x != nil {
		return x.Kshort
	}
	return 0
}

func (x *Currency) GetDlong() float64 {
	if x != nil {
		return x.Dlong
	}
	return 0
}

func (x *Currency) GetDshort() float64 {
	if x != nil {
		return x.Dshort
	}
	return 0
}

func (x *Currency) GetDlongMin() float64 {
	if x != nil {
		return x.DlongMin
	}
	return 0
}

func (x *Currency) GetDshortMin() float64 {
	if x != nil {
		return x.DshortMin
	}
	return 0
}

func (x *Currency) GetShortEnabledFlag() bool {
	if x != nil {
		return x.ShortEnabledFlag
	}
	return false
}

func (x *Currency) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Currency) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *Currency) GetNominal() *MoneyValue {
	if x != nil {
		return x.Nominal
	}
	return nil
}

func (x *Currency) GetCountryOfRisk() string {
	if x != nil {
		return x.CountryOfRisk
	}
	return ""
}

func (x *Currency) GetCountryOfRiskName() string {
	if x != nil {
		return x.CountryOfRiskName
	}
	return ""
}

func (x *Currency) GetTradingStatus() SecurityTradingStatus {
	if x != nil {
		return x.TradingStatus
	}
	return SecurityTradingStatus_SECURITY_TRADING_STATUS_UNSPECIFIED
}

func (x *Currency) GetOtcFlag() bool {
	if x != nil {
		return x.OtcFlag
	}
	return false
}

func (x *Currency) GetBuyAvailableFlag() bool {
	if x != nil {
		return x.BuyAvailableFlag
	}
	return false
}

func (x *Currency) GetSellAvailableFlag() bool {
	if x != nil {
		return x.SellAvailableFlag
	}
	return false
}

func (x *Currency) GetIsoCurrencyName() string {
	if x != nil {
		return x.IsoCurrencyName
	}
	return ""
}

func (x *Currency) GetMinPriceIncrement() float32 {
	if x != nil {
		return x.MinPriceIncrement
	}
	return 0
}

func (x *Currency) GetApiTradeAvailableFlag() bool {
	if x != nil {
		return x.ApiTradeAvailableFlag
	}
	return false
}

//Объект передачи информации об инвестиционном фонде.
type Etf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Figi                  string                 `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                                                                                           //Figi-идентификатор инструмента.
	Ticker                string                 `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`                                                                                                       //Тикер инструмента.
	ClassCode             string                 `protobuf:"bytes,3,opt,name=class_code,json=classCode,proto3" json:"class_code,omitempty"`                                                                                //Класс-код (секция торгов).
	Isin                  string                 `protobuf:"bytes,4,opt,name=isin,proto3" json:"isin,omitempty"`                                                                                                           //Isin-идентификатор инструмента.
	Lot                   int32                  `protobuf:"varint,5,opt,name=lot,proto3" json:"lot,omitempty"`                                                                                                            //Лотность инструмента. Возможно совершение операций только на количества ценной бумаги, кратные параметру *lot*. Подробнее: [лот](/investAPI/glossary#lot)
	Currency              string                 `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"`                                                                                                   //Валюта расчётов.
	Klong                 float64                `protobuf:"fixed64,7,opt,name=klong,proto3" json:"klong,omitempty"`                                                                                                       //Коэффициент ставки риска длинной позиции по инструменту.
	Kshort                float64                `protobuf:"fixed64,8,opt,name=kshort,proto3" json:"kshort,omitempty"`                                                                                                     //Коэффициент ставки риска короткой позиции по инструменту.
	Dlong                 float64                `protobuf:"fixed64,9,opt,name=dlong,proto3" json:"dlong,omitempty"`                                                                                                       //Ставка риска минимальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
	Dshort                float64                `protobuf:"fixed64,10,opt,name=dshort,proto3" json:"dshort,omitempty"`                                                                                                    //Ставка риска минимальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
	DlongMin              float64                `protobuf:"fixed64,11,opt,name=dlong_min,json=dlongMin,proto3" json:"dlong_min,omitempty"`                                                                                //Ставка риска начальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
	DshortMin             float64                `protobuf:"fixed64,12,opt,name=dshort_min,json=dshortMin,proto3" json:"dshort_min,omitempty"`                                                                             //Ставка риска начальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
	ShortEnabledFlag      bool                   `protobuf:"varint,13,opt,name=short_enabled_flag,json=shortEnabledFlag,proto3" json:"short_enabled_flag,omitempty"`                                                       //Признак доступности для операций в шорт.
	Name                  string                 `protobuf:"bytes,15,opt,name=name,proto3" json:"name,omitempty"`                                                                                                          //Название инструмента.
	Exchange              string                 `protobuf:"bytes,16,opt,name=exchange,proto3" json:"exchange,omitempty"`                                                                                                  //Торговая площадка.
	FixedCommission       float64                `protobuf:"fixed64,17,opt,name=fixed_commission,json=fixedCommission,proto3" json:"fixed_commission,omitempty"`                                                           //Размер фиксированной комиссии фонда.
	FocusType             string                 `protobuf:"bytes,18,opt,name=focus_type,json=focusType,proto3" json:"focus_type,omitempty"`                                                                               //Возможные значения: </br>**equity** — акции;</br>**fixed_income** — облигации;</br>**mixed_allocation** — смешанный;</br>**money_market** — денежный рынок;</br>**real_estate** — недвижимость;</br>**commodity** — товары;</br>**specialty** — специальный;</br>**private_equity** — private equity;</br>**alternative_investment** — альтернативные инвестиции.
	ReleasedDate          *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=released_date,json=releasedDate,proto3" json:"released_date,omitempty"`                                                                      //Дата выпуска в часовом поясе UTC.
	NumShares             float64                `protobuf:"fixed64,20,opt,name=num_shares,json=numShares,proto3" json:"num_shares,omitempty"`                                                                             //Количество акций фонда в обращении.
	CountryOfRisk         string                 `protobuf:"bytes,21,opt,name=country_of_risk,json=countryOfRisk,proto3" json:"country_of_risk,omitempty"`                                                                 //Код страны эмитента.
	CountryOfRiskName     string                 `protobuf:"bytes,22,opt,name=country_of_risk_name,json=countryOfRiskName,proto3" json:"country_of_risk_name,omitempty"`                                                   //Наименование страны эмитента.
	Sector                string                 `protobuf:"bytes,23,opt,name=sector,proto3" json:"sector,omitempty"`                                                                                                      //Сектор экономики.
	RebalancingFreq       string                 `protobuf:"bytes,24,opt,name=rebalancing_freq,json=rebalancingFreq,proto3" json:"rebalancing_freq,omitempty"`                                                             //Частота ребалансировки.
	TradingStatus         SecurityTradingStatus  `protobuf:"varint,25,opt,name=trading_status,json=tradingStatus,proto3,enum=tinkoff.public.invest.api.contract.v1.SecurityTradingStatus" json:"trading_status,omitempty"` //Текущий режим торгов инструмента.
	OtcFlag               bool                   `protobuf:"varint,26,opt,name=otc_flag,json=otcFlag,proto3" json:"otc_flag,omitempty"`                                                                                    //Признак внебиржевой ценной бумаги.
	BuyAvailableFlag      bool                   `protobuf:"varint,27,opt,name=buy_available_flag,json=buyAvailableFlag,proto3" json:"buy_available_flag,omitempty"`                                                       //Признак доступности для покупки.
	SellAvailableFlag     bool                   `protobuf:"varint,28,opt,name=sell_available_flag,json=sellAvailableFlag,proto3" json:"sell_available_flag,omitempty"`                                                    //Признак доступности для продажи.
	MinPriceIncrement     float32                `protobuf:"fixed32,29,opt,name=min_price_increment,json=minPriceIncrement,proto3" json:"min_price_increment,omitempty"`                                                   //Шаг цены.
	ApiTradeAvailableFlag bool                   `protobuf:"varint,30,opt,name=api_trade_available_flag,json=apiTradeAvailableFlag,proto3" json:"api_trade_available_flag,omitempty"`                                      //Признак доступности торгов через API.
}

func (x *Etf) Reset() {
	*x = Etf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Etf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Etf) ProtoMessage() {}

func (x *Etf) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Etf.ProtoReflect.Descriptor instead.
func (*Etf) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{18}
}

func (x *Etf) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *Etf) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *Etf) GetClassCode() string {
	if x != nil {
		return x.ClassCode
	}
	return ""
}

func (x *Etf) GetIsin() string {
	if x != nil {
		return x.Isin
	}
	return ""
}

func (x *Etf) GetLot() int32 {
	if x != nil {
		return x.Lot
	}
	return 0
}

func (x *Etf) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Etf) GetKlong() float64 {
	if x != nil {
		return x.Klong
	}
	return 0
}

func (x *Etf) GetKshort() float64 {
	if x != nil {
		return x.Kshort
	}
	return 0
}

func (x *Etf) GetDlong() float64 {
	if x != nil {
		return x.Dlong
	}
	return 0
}

func (x *Etf) GetDshort() float64 {
	if x != nil {
		return x.Dshort
	}
	return 0
}

func (x *Etf) GetDlongMin() float64 {
	if x != nil {
		return x.DlongMin
	}
	return 0
}

func (x *Etf) GetDshortMin() float64 {
	if x != nil {
		return x.DshortMin
	}
	return 0
}

func (x *Etf) GetShortEnabledFlag() bool {
	if x != nil {
		return x.ShortEnabledFlag
	}
	return false
}

func (x *Etf) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Etf) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *Etf) GetFixedCommission() float64 {
	if x != nil {
		return x.FixedCommission
	}
	return 0
}

func (x *Etf) GetFocusType() string {
	if x != nil {
		return x.FocusType
	}
	return ""
}

func (x *Etf) GetReleasedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReleasedDate
	}
	return nil
}

func (x *Etf) GetNumShares() float64 {
	if x != nil {
		return x.NumShares
	}
	return 0
}

func (x *Etf) GetCountryOfRisk() string {
	if x != nil {
		return x.CountryOfRisk
	}
	return ""
}

func (x *Etf) GetCountryOfRiskName() string {
	if x != nil {
		return x.CountryOfRiskName
	}
	return ""
}

func (x *Etf) GetSector() string {
	if x != nil {
		return x.Sector
	}
	return ""
}

func (x *Etf) GetRebalancingFreq() string {
	if x != nil {
		return x.RebalancingFreq
	}
	return ""
}

func (x *Etf) GetTradingStatus() SecurityTradingStatus {
	if x != nil {
		return x.TradingStatus
	}
	return SecurityTradingStatus_SECURITY_TRADING_STATUS_UNSPECIFIED
}

func (x *Etf) GetOtcFlag() bool {
	if x != nil {
		return x.OtcFlag
	}
	return false
}

func (x *Etf) GetBuyAvailableFlag() bool {
	if x != nil {
		return x.BuyAvailableFlag
	}
	return false
}

func (x *Etf) GetSellAvailableFlag() bool {
	if x != nil {
		return x.SellAvailableFlag
	}
	return false
}

func (x *Etf) GetMinPriceIncrement() float32 {
	if x != nil {
		return x.MinPriceIncrement
	}
	return 0
}

func (x *Etf) GetApiTradeAvailableFlag() bool {
	if x != nil {
		return x.ApiTradeAvailableFlag
	}
	return false
}

//Объект передачи информации о фьючерсе.
type Future struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Figi                  string                 `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                                                                                           //Figi-идентификатор инструмента.
	Ticker                string                 `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`                                                                                                       //Тикер инструмента.
	ClassCode             string                 `protobuf:"bytes,3,opt,name=class_code,json=classCode,proto3" json:"class_code,omitempty"`                                                                                //Класс-код (секция торгов).
	Lot                   int32                  `protobuf:"varint,4,opt,name=lot,proto3" json:"lot,omitempty"`                                                                                                            //Лотность инструмента. Возможно совершение операций только на количества ценной бумаги, кратные параметру *lot*. Подробнее: [лот](/investAPI/glossary#lot)
	Currency              string                 `protobuf:"bytes,5,opt,name=currency,proto3" json:"currency,omitempty"`                                                                                                   //Валюта расчётов.
	Klong                 float64                `protobuf:"fixed64,6,opt,name=klong,proto3" json:"klong,omitempty"`                                                                                                       //Коэффициент ставки риска длинной позиции по клиенту.
	Kshort                float64                `protobuf:"fixed64,7,opt,name=kshort,proto3" json:"kshort,omitempty"`                                                                                                     //Коэффициент ставки риска короткой позиции по клиенту.
	Dlong                 float64                `protobuf:"fixed64,8,opt,name=dlong,proto3" json:"dlong,omitempty"`                                                                                                       //Ставка риска минимальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
	Dshort                float64                `protobuf:"fixed64,9,opt,name=dshort,proto3" json:"dshort,omitempty"`                                                                                                     //Ставка риска минимальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
	DlongMin              float64                `protobuf:"fixed64,10,opt,name=dlong_min,json=dlongMin,proto3" json:"dlong_min,omitempty"`                                                                                //Ставка риска начальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
	DshortMin             float64                `protobuf:"fixed64,11,opt,name=dshort_min,json=dshortMin,proto3" json:"dshort_min,omitempty"`                                                                             //Ставка риска начальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
	ShortEnabledFlag      bool                   `protobuf:"varint,12,opt,name=short_enabled_flag,json=shortEnabledFlag,proto3" json:"short_enabled_flag,omitempty"`                                                       //Признак доступности для операций шорт.
	Name                  string                 `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`                                                                                                          //Название инструмента.
	Exchange              string                 `protobuf:"bytes,14,opt,name=exchange,proto3" json:"exchange,omitempty"`                                                                                                  //Торговая площадка.
	FirstTradeDate        *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=first_trade_date,json=firstTradeDate,proto3" json:"first_trade_date,omitempty"`                                                              //Дата начала обращения контракта в часовом поясе UTC.
	LastTradeDate         *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=last_trade_date,json=lastTradeDate,proto3" json:"last_trade_date,omitempty"`                                                                 //Дата в часовом поясе UTC, до которой возможно проведение операций с фьючерсом.
	FuturesType           string                 `protobuf:"bytes,17,opt,name=futures_type,json=futuresType,proto3" json:"futures_type,omitempty"`                                                                         //Тип фьючерса. Возможные значения: </br>**physical_delivery** — физические поставки; </br>**cash_settlement** — денежный эквивалент.
	AssetType             string                 `protobuf:"bytes,18,opt,name=asset_type,json=assetType,proto3" json:"asset_type,omitempty"`                                                                               //Тип актива. Возможные значения: </br>**commodity** — товар; </br>**currency** — валюта; </br>**security** — ценная бумага; </br>**index** — индекс.
	BasicAsset            string                 `protobuf:"bytes,19,opt,name=basic_asset,json=basicAsset,proto3" json:"basic_asset,omitempty"`                                                                            //Основной актив.
	BasicAssetSize        float64                `protobuf:"fixed64,20,opt,name=basic_asset_size,json=basicAssetSize,proto3" json:"basic_asset_size,omitempty"`                                                            //Размер основного актива.
	CountryOfRisk         string                 `protobuf:"bytes,21,opt,name=country_of_risk,json=countryOfRisk,proto3" json:"country_of_risk,omitempty"`                                                                 //Код страны эмитента.
	CountryOfRiskName     string                 `protobuf:"bytes,22,opt,name=country_of_risk_name,json=countryOfRiskName,proto3" json:"country_of_risk_name,omitempty"`                                                   //Наименование страны эмитента.
	Sector                string                 `protobuf:"bytes,23,opt,name=sector,proto3" json:"sector,omitempty"`                                                                                                      //Сектор экономики.
	ExpirationDate        *timestamppb.Timestamp `protobuf:"bytes,24,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`                                                                //Дата истечения срока.
	TradingStatus         SecurityTradingStatus  `protobuf:"varint,25,opt,name=trading_status,json=tradingStatus,proto3,enum=tinkoff.public.invest.api.contract.v1.SecurityTradingStatus" json:"trading_status,omitempty"` //Текущий режим торгов инструмента.
	OtcFlag               bool                   `protobuf:"varint,26,opt,name=otc_flag,json=otcFlag,proto3" json:"otc_flag,omitempty"`                                                                                    //Признак внебиржевой ценной бумаги.
	BuyAvailableFlag      bool                   `protobuf:"varint,27,opt,name=buy_available_flag,json=buyAvailableFlag,proto3" json:"buy_available_flag,omitempty"`                                                       //Признак доступности для покупки.
	SellAvailableFlag     bool                   `protobuf:"varint,28,opt,name=sell_available_flag,json=sellAvailableFlag,proto3" json:"sell_available_flag,omitempty"`                                                    //Признак доступности для продажи.
	MinPriceIncrement     float32                `protobuf:"fixed32,29,opt,name=min_price_increment,json=minPriceIncrement,proto3" json:"min_price_increment,omitempty"`                                                   //Шаг цены.
	ApiTradeAvailableFlag bool                   `protobuf:"varint,30,opt,name=api_trade_available_flag,json=apiTradeAvailableFlag,proto3" json:"api_trade_available_flag,omitempty"`                                      //Признак доступности торгов через API.
}

func (x *Future) Reset() {
	*x = Future{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Future) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Future) ProtoMessage() {}

func (x *Future) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Future.ProtoReflect.Descriptor instead.
func (*Future) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{19}
}

func (x *Future) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *Future) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *Future) GetClassCode() string {
	if x != nil {
		return x.ClassCode
	}
	return ""
}

func (x *Future) GetLot() int32 {
	if x != nil {
		return x.Lot
	}
	return 0
}

func (x *Future) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Future) GetKlong() float64 {
	if x != nil {
		return x.Klong
	}
	return 0
}

func (x *Future) GetKshort() float64 {
	if x != nil {
		return x.Kshort
	}
	return 0
}

func (x *Future) GetDlong() float64 {
	if x != nil {
		return x.Dlong
	}
	return 0
}

func (x *Future) GetDshort() float64 {
	if x != nil {
		return x.Dshort
	}
	return 0
}

func (x *Future) GetDlongMin() float64 {
	if x != nil {
		return x.DlongMin
	}
	return 0
}

func (x *Future) GetDshortMin() float64 {
	if x != nil {
		return x.DshortMin
	}
	return 0
}

func (x *Future) GetShortEnabledFlag() bool {
	if x != nil {
		return x.ShortEnabledFlag
	}
	return false
}

func (x *Future) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Future) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *Future) GetFirstTradeDate() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstTradeDate
	}
	return nil
}

func (x *Future) GetLastTradeDate() *timestamppb.Timestamp {
	if x != nil {
		return x.LastTradeDate
	}
	return nil
}

func (x *Future) GetFuturesType() string {
	if x != nil {
		return x.FuturesType
	}
	return ""
}

func (x *Future) GetAssetType() string {
	if x != nil {
		return x.AssetType
	}
	return ""
}

func (x *Future) GetBasicAsset() string {
	if x != nil {
		return x.BasicAsset
	}
	return ""
}

func (x *Future) GetBasicAssetSize() float64 {
	if x != nil {
		return x.BasicAssetSize
	}
	return 0
}

func (x *Future) GetCountryOfRisk() string {
	if x != nil {
		return x.CountryOfRisk
	}
	return ""
}

func (x *Future) GetCountryOfRiskName() string {
	if x != nil {
		return x.CountryOfRiskName
	}
	return ""
}

func (x *Future) GetSector() string {
	if x != nil {
		return x.Sector
	}
	return ""
}

func (x *Future) GetExpirationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

func (x *Future) GetTradingStatus() SecurityTradingStatus {
	if x != nil {
		return x.TradingStatus
	}
	return SecurityTradingStatus_SECURITY_TRADING_STATUS_UNSPECIFIED
}

func (x *Future) GetOtcFlag() bool {
	if x != nil {
		return x.OtcFlag
	}
	return false
}

func (x *Future) GetBuyAvailableFlag() bool {
	if x != nil {
		return x.BuyAvailableFlag
	}
	return false
}

func (x *Future) GetSellAvailableFlag() bool {
	if x != nil {
		return x.SellAvailableFlag
	}
	return false
}

func (x *Future) GetMinPriceIncrement() float32 {
	if x != nil {
		return x.MinPriceIncrement
	}
	return 0
}

func (x *Future) GetApiTradeAvailableFlag() bool {
	if x != nil {
		return x.ApiTradeAvailableFlag
	}
	return false
}

//Объект передачи информации об акции.
type Share struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Figi                  string                 `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                                                                                           //Figi-идентификатор инструмента.
	Ticker                string                 `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`                                                                                                       //Тикер инструмента.
	ClassCode             string                 `protobuf:"bytes,3,opt,name=class_code,json=classCode,proto3" json:"class_code,omitempty"`                                                                                //Класс-код (секция торгов).
	Isin                  string                 `protobuf:"bytes,4,opt,name=isin,proto3" json:"isin,omitempty"`                                                                                                           //Isin-идентификатор инструмента.
	Lot                   int32                  `protobuf:"varint,5,opt,name=lot,proto3" json:"lot,omitempty"`                                                                                                            //Лотность инструмента. Возможно совершение операций только на количества ценной бумаги, кратные параметру *lot*. Подробнее: [лот](/investAPI/glossary#lot)
	Currency              string                 `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"`                                                                                                   //Валюта расчётов.
	Klong                 float64                `protobuf:"fixed64,7,opt,name=klong,proto3" json:"klong,omitempty"`                                                                                                       //Коэффициент ставки риска длинной позиции по инструменту.
	Kshort                float64                `protobuf:"fixed64,8,opt,name=kshort,proto3" json:"kshort,omitempty"`                                                                                                     //Коэффициент ставки риска короткой позиции по инструменту.
	Dlong                 float64                `protobuf:"fixed64,9,opt,name=dlong,proto3" json:"dlong,omitempty"`                                                                                                       //Ставка риска минимальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
	Dshort                float64                `protobuf:"fixed64,10,opt,name=dshort,proto3" json:"dshort,omitempty"`                                                                                                    //Ставка риска минимальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
	DlongMin              float64                `protobuf:"fixed64,11,opt,name=dlong_min,json=dlongMin,proto3" json:"dlong_min,omitempty"`                                                                                //Ставка риска начальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
	DshortMin             float64                `protobuf:"fixed64,12,opt,name=dshort_min,json=dshortMin,proto3" json:"dshort_min,omitempty"`                                                                             //Ставка риска начальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
	ShortEnabledFlag      bool                   `protobuf:"varint,13,opt,name=short_enabled_flag,json=shortEnabledFlag,proto3" json:"short_enabled_flag,omitempty"`                                                       //Признак доступности для операций в шорт.
	Name                  string                 `protobuf:"bytes,15,opt,name=name,proto3" json:"name,omitempty"`                                                                                                          //Название инструмента.
	Exchange              string                 `protobuf:"bytes,16,opt,name=exchange,proto3" json:"exchange,omitempty"`                                                                                                  //Торговая площадка.
	IpoDate               *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=ipo_date,json=ipoDate,proto3" json:"ipo_date,omitempty"`                                                                                     //Дата IPO акции в часовом поясе UTC.
	IssueSize             int64                  `protobuf:"varint,18,opt,name=issue_size,json=issueSize,proto3" json:"issue_size,omitempty"`                                                                              //Размер выпуска.
	CountryOfRisk         string                 `protobuf:"bytes,19,opt,name=country_of_risk,json=countryOfRisk,proto3" json:"country_of_risk,omitempty"`                                                                 //Код страны эмитента.
	CountryOfRiskName     string                 `protobuf:"bytes,20,opt,name=country_of_risk_name,json=countryOfRiskName,proto3" json:"country_of_risk_name,omitempty"`                                                   //Наименование страны эмитента.
	Sector                string                 `protobuf:"bytes,21,opt,name=sector,proto3" json:"sector,omitempty"`                                                                                                      //Сектор экономики.
	IssueSizePlan         int64                  `protobuf:"varint,22,opt,name=issue_size_plan,json=issueSizePlan,proto3" json:"issue_size_plan,omitempty"`                                                                //Плановый размер выпуска.
	Nominal               *MoneyValue            `protobuf:"bytes,23,opt,name=nominal,proto3" json:"nominal,omitempty"`                                                                                                    //Номинал.
	TradingStatus         SecurityTradingStatus  `protobuf:"varint,25,opt,name=trading_status,json=tradingStatus,proto3,enum=tinkoff.public.invest.api.contract.v1.SecurityTradingStatus" json:"trading_status,omitempty"` //Текущий режим торгов инструмента.
	OtcFlag               bool                   `protobuf:"varint,26,opt,name=otc_flag,json=otcFlag,proto3" json:"otc_flag,omitempty"`                                                                                    //Признак внебиржевой ценной бумаги.
	BuyAvailableFlag      bool                   `protobuf:"varint,27,opt,name=buy_available_flag,json=buyAvailableFlag,proto3" json:"buy_available_flag,omitempty"`                                                       //Признак доступности для покупки.
	SellAvailableFlag     bool                   `protobuf:"varint,28,opt,name=sell_available_flag,json=sellAvailableFlag,proto3" json:"sell_available_flag,omitempty"`                                                    //Признак доступности для продажи.
	DivYieldFlag          bool                   `protobuf:"varint,29,opt,name=div_yield_flag,json=divYieldFlag,proto3" json:"div_yield_flag,omitempty"`                                                                   //Признак наличия дивидендной доходности.
	ShareType             ShareType              `protobuf:"varint,30,opt,name=share_type,json=shareType,proto3,enum=tinkoff.public.invest.api.contract.v1.ShareType" json:"share_type,omitempty"`                         //Тип акции. Возможные значения: [ShareType](/investAPI/instruments#sharetype)
	MinPriceIncrement     float32                `protobuf:"fixed32,31,opt,name=min_price_increment,json=minPriceIncrement,proto3" json:"min_price_increment,omitempty"`                                                   //Шаг цены.
	ApiTradeAvailableFlag bool                   `protobuf:"varint,32,opt,name=api_trade_available_flag,json=apiTradeAvailableFlag,proto3" json:"api_trade_available_flag,omitempty"`                                      //Признак доступности торгов через API.
}

func (x *Share) Reset() {
	*x = Share{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Share) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Share) ProtoMessage() {}

func (x *Share) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Share.ProtoReflect.Descriptor instead.
func (*Share) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{20}
}

func (x *Share) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *Share) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *Share) GetClassCode() string {
	if x != nil {
		return x.ClassCode
	}
	return ""
}

func (x *Share) GetIsin() string {
	if x != nil {
		return x.Isin
	}
	return ""
}

func (x *Share) GetLot() int32 {
	if x != nil {
		return x.Lot
	}
	return 0
}

func (x *Share) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Share) GetKlong() float64 {
	if x != nil {
		return x.Klong
	}
	return 0
}

func (x *Share) GetKshort() float64 {
	if x != nil {
		return x.Kshort
	}
	return 0
}

func (x *Share) GetDlong() float64 {
	if x != nil {
		return x.Dlong
	}
	return 0
}

func (x *Share) GetDshort() float64 {
	if x != nil {
		return x.Dshort
	}
	return 0
}

func (x *Share) GetDlongMin() float64 {
	if x != nil {
		return x.DlongMin
	}
	return 0
}

func (x *Share) GetDshortMin() float64 {
	if x != nil {
		return x.DshortMin
	}
	return 0
}

func (x *Share) GetShortEnabledFlag() bool {
	if x != nil {
		return x.ShortEnabledFlag
	}
	return false
}

func (x *Share) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Share) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *Share) GetIpoDate() *timestamppb.Timestamp {
	if x != nil {
		return x.IpoDate
	}
	return nil
}

func (x *Share) GetIssueSize() int64 {
	if x != nil {
		return x.IssueSize
	}
	return 0
}

func (x *Share) GetCountryOfRisk() string {
	if x != nil {
		return x.CountryOfRisk
	}
	return ""
}

func (x *Share) GetCountryOfRiskName() string {
	if x != nil {
		return x.CountryOfRiskName
	}
	return ""
}

func (x *Share) GetSector() string {
	if x != nil {
		return x.Sector
	}
	return ""
}

func (x *Share) GetIssueSizePlan() int64 {
	if x != nil {
		return x.IssueSizePlan
	}
	return 0
}

func (x *Share) GetNominal() *MoneyValue {
	if x != nil {
		return x.Nominal
	}
	return nil
}

func (x *Share) GetTradingStatus() SecurityTradingStatus {
	if x != nil {
		return x.TradingStatus
	}
	return SecurityTradingStatus_SECURITY_TRADING_STATUS_UNSPECIFIED
}

func (x *Share) GetOtcFlag() bool {
	if x != nil {
		return x.OtcFlag
	}
	return false
}

func (x *Share) GetBuyAvailableFlag() bool {
	if x != nil {
		return x.BuyAvailableFlag
	}
	return false
}

func (x *Share) GetSellAvailableFlag() bool {
	if x != nil {
		return x.SellAvailableFlag
	}
	return false
}

func (x *Share) GetDivYieldFlag() bool {
	if x != nil {
		return x.DivYieldFlag
	}
	return false
}

func (x *Share) GetShareType() ShareType {
	if x != nil {
		return x.ShareType
	}
	return ShareType_SHARE_TYPE_UNSPECIFIED
}

func (x *Share) GetMinPriceIncrement() float32 {
	if x != nil {
		return x.MinPriceIncrement
	}
	return 0
}

func (x *Share) GetApiTradeAvailableFlag() bool {
	if x != nil {
		return x.ApiTradeAvailableFlag
	}
	return false
}

type GetAccruedInterestsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Figi string                 `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"` //Figi-идентификатор инструмента.
	From *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"` //Начало запрашиваемого периода в часовом поясе UTC.
	To   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`     //Окончание запрашиваемого периода в часовом поясе UTC.
}

func (x *GetAccruedInterestsRequest) Reset() {
	*x = GetAccruedInterestsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccruedInterestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccruedInterestsRequest) ProtoMessage() {}

func (x *GetAccruedInterestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccruedInterestsRequest.ProtoReflect.Descriptor instead.
func (*GetAccruedInterestsRequest) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{21}
}

func (x *GetAccruedInterestsRequest) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *GetAccruedInterestsRequest) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *GetAccruedInterestsRequest) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

type GetAccruedInterestsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccruedInterests []*AccruedInterest `protobuf:"bytes,1,rep,name=accrued_interests,json=accruedInterests,proto3" json:"accrued_interests,omitempty"` //Массив операций начисления купонов.
}

func (x *GetAccruedInterestsResponse) Reset() {
	*x = GetAccruedInterestsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccruedInterestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccruedInterestsResponse) ProtoMessage() {}

func (x *GetAccruedInterestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccruedInterestsResponse.ProtoReflect.Descriptor instead.
func (*GetAccruedInterestsResponse) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{22}
}

func (x *GetAccruedInterestsResponse) GetAccruedInterests() []*AccruedInterest {
	if x != nil {
		return x.AccruedInterests
	}
	return nil
}

//Операция начисления купонов.
type AccruedInterest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date         *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`                                       //Дата и время выплаты в часовом поясе UTC.
	Value        *Quotation             `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`                                     //Величина выплаты.
	ValuePercent float32                `protobuf:"fixed32,3,opt,name=value_percent,json=valuePercent,proto3" json:"value_percent,omitempty"` //Величина выплаты в процентах от номинала.
	Nominal      *Quotation             `protobuf:"bytes,4,opt,name=nominal,proto3" json:"nominal,omitempty"`                                 //Номинал облигации.
}

func (x *AccruedInterest) Reset() {
	*x = AccruedInterest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccruedInterest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccruedInterest) ProtoMessage() {}

func (x *AccruedInterest) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccruedInterest.ProtoReflect.Descriptor instead.
func (*AccruedInterest) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{23}
}

func (x *AccruedInterest) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *AccruedInterest) GetValue() *Quotation {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AccruedInterest) GetValuePercent() float32 {
	if x != nil {
		return x.ValuePercent
	}
	return 0
}

func (x *AccruedInterest) GetNominal() *Quotation {
	if x != nil {
		return x.Nominal
	}
	return nil
}

type GetFuturesMarginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Figi string `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"` // Идентификатор инструмента.
}

func (x *GetFuturesMarginRequest) Reset() {
	*x = GetFuturesMarginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFuturesMarginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFuturesMarginRequest) ProtoMessage() {}

func (x *GetFuturesMarginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFuturesMarginRequest.ProtoReflect.Descriptor instead.
func (*GetFuturesMarginRequest) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{24}
}

func (x *GetFuturesMarginRequest) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

type GetFuturesMarginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitialMarginOnBuy  *MoneyValue `protobuf:"bytes,1,opt,name=initial_margin_on_buy,json=initialMarginOnBuy,proto3" json:"initial_margin_on_buy,omitempty"`    // Гарантийное обеспечение при покупке.
	InitialMarginOnSell *MoneyValue `protobuf:"bytes,2,opt,name=initial_margin_on_sell,json=initialMarginOnSell,proto3" json:"initial_margin_on_sell,omitempty"` // Гарантийное обеспечение при продаже.
}

func (x *GetFuturesMarginResponse) Reset() {
	*x = GetFuturesMarginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFuturesMarginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFuturesMarginResponse) ProtoMessage() {}

func (x *GetFuturesMarginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFuturesMarginResponse.ProtoReflect.Descriptor instead.
func (*GetFuturesMarginResponse) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{25}
}

func (x *GetFuturesMarginResponse) GetInitialMarginOnBuy() *MoneyValue {
	if x != nil {
		return x.InitialMarginOnBuy
	}
	return nil
}

func (x *GetFuturesMarginResponse) GetInitialMarginOnSell() *MoneyValue {
	if x != nil {
		return x.InitialMarginOnSell
	}
	return nil
}

//Данные по инструменту.
type InstrumentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instrument *Instrument `protobuf:"bytes,1,opt,name=instrument,proto3" json:"instrument,omitempty"` // Основная информация об инструменте.
}

func (x *InstrumentResponse) Reset() {
	*x = InstrumentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentResponse) ProtoMessage() {}

func (x *InstrumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentResponse.ProtoReflect.Descriptor instead.
func (*InstrumentResponse) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{26}
}

func (x *InstrumentResponse) GetInstrument() *Instrument {
	if x != nil {
		return x.Instrument
	}
	return nil
}

//Объект передачи основной информации об инструменте.
type Instrument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Figi                  string                `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                                                                                           //Figi-идентификатор инструмента.
	Ticker                string                `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`                                                                                                       //Тикер инструмента.
	ClassCode             string                `protobuf:"bytes,3,opt,name=class_code,json=classCode,proto3" json:"class_code,omitempty"`                                                                                //Класс-код инструмента.
	Isin                  string                `protobuf:"bytes,4,opt,name=isin,proto3" json:"isin,omitempty"`                                                                                                           //Isin-идентификатор инструмента.
	Lot                   int32                 `protobuf:"varint,5,opt,name=lot,proto3" json:"lot,omitempty"`                                                                                                            //Лотность инструмента. Возможно совершение операций только на количества ценной бумаги, кратные параметру *lot*. Подробнее: [лот](/investAPI/glossary#lot)
	Currency              string                `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"`                                                                                                   //Валюта расчётов.
	Klong                 float64               `protobuf:"fixed64,7,opt,name=klong,proto3" json:"klong,omitempty"`                                                                                                       //Коэффициент ставки риска длинной позиции по инструменту.
	Kshort                float64               `protobuf:"fixed64,8,opt,name=kshort,proto3" json:"kshort,omitempty"`                                                                                                     //Коэффициент ставки риска короткой позиции по инструменту.
	Dlong                 float64               `protobuf:"fixed64,9,opt,name=dlong,proto3" json:"dlong,omitempty"`                                                                                                       //Ставка риска минимальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
	Dshort                float64               `protobuf:"fixed64,10,opt,name=dshort,proto3" json:"dshort,omitempty"`                                                                                                    //Ставка риска минимальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
	DlongMin              float64               `protobuf:"fixed64,11,opt,name=dlong_min,json=dlongMin,proto3" json:"dlong_min,omitempty"`                                                                                //Ставка риска начальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
	DshortMin             float64               `protobuf:"fixed64,12,opt,name=dshort_min,json=dshortMin,proto3" json:"dshort_min,omitempty"`                                                                             //Ставка риска начальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
	ShortEnabledFlag      bool                  `protobuf:"varint,13,opt,name=short_enabled_flag,json=shortEnabledFlag,proto3" json:"short_enabled_flag,omitempty"`                                                       //Признак доступности для операций в шорт.
	Name                  string                `protobuf:"bytes,14,opt,name=name,proto3" json:"name,omitempty"`                                                                                                          //Название инструмента.
	Exchange              string                `protobuf:"bytes,15,opt,name=exchange,proto3" json:"exchange,omitempty"`                                                                                                  //Торговая площадка.
	CountryOfRisk         string                `protobuf:"bytes,16,opt,name=country_of_risk,json=countryOfRisk,proto3" json:"country_of_risk,omitempty"`                                                                 //Код страны эмитента.
	CountryOfRiskName     string                `protobuf:"bytes,17,opt,name=country_of_risk_name,json=countryOfRiskName,proto3" json:"country_of_risk_name,omitempty"`                                                   //Наименование страны эмитента.
	InstrumentType        string                `protobuf:"bytes,18,opt,name=instrument_type,json=instrumentType,proto3" json:"instrument_type,omitempty"`                                                                //Тип инструмента.
	TradingStatus         SecurityTradingStatus `protobuf:"varint,19,opt,name=trading_status,json=tradingStatus,proto3,enum=tinkoff.public.invest.api.contract.v1.SecurityTradingStatus" json:"trading_status,omitempty"` //Текущий режим торгов инструмента.
	OtcFlag               bool                  `protobuf:"varint,20,opt,name=otc_flag,json=otcFlag,proto3" json:"otc_flag,omitempty"`                                                                                    //Признак внебиржевой ценной бумаги.
	BuyAvailableFlag      bool                  `protobuf:"varint,21,opt,name=buy_available_flag,json=buyAvailableFlag,proto3" json:"buy_available_flag,omitempty"`                                                       //Признак доступности для покупки.
	SellAvailableFlag     bool                  `protobuf:"varint,22,opt,name=sell_available_flag,json=sellAvailableFlag,proto3" json:"sell_available_flag,omitempty"`                                                    //Признак доступности для продажи.
	MinPriceIncrement     float32               `protobuf:"fixed32,23,opt,name=min_price_increment,json=minPriceIncrement,proto3" json:"min_price_increment,omitempty"`                                                   //Шаг цены.
	ApiTradeAvailableFlag bool                  `protobuf:"varint,24,opt,name=api_trade_available_flag,json=apiTradeAvailableFlag,proto3" json:"api_trade_available_flag,omitempty"`                                      //Признак доступности торгов через API.
}

func (x *Instrument) Reset() {
	*x = Instrument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Instrument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instrument) ProtoMessage() {}

func (x *Instrument) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instrument.ProtoReflect.Descriptor instead.
func (*Instrument) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{27}
}

func (x *Instrument) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *Instrument) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *Instrument) GetClassCode() string {
	if x != nil {
		return x.ClassCode
	}
	return ""
}

func (x *Instrument) GetIsin() string {
	if x != nil {
		return x.Isin
	}
	return ""
}

func (x *Instrument) GetLot() int32 {
	if x != nil {
		return x.Lot
	}
	return 0
}

func (x *Instrument) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Instrument) GetKlong() float64 {
	if x != nil {
		return x.Klong
	}
	return 0
}

func (x *Instrument) GetKshort() float64 {
	if x != nil {
		return x.Kshort
	}
	return 0
}

func (x *Instrument) GetDlong() float64 {
	if x != nil {
		return x.Dlong
	}
	return 0
}

func (x *Instrument) GetDshort() float64 {
	if x != nil {
		return x.Dshort
	}
	return 0
}

func (x *Instrument) GetDlongMin() float64 {
	if x != nil {
		return x.DlongMin
	}
	return 0
}

func (x *Instrument) GetDshortMin() float64 {
	if x != nil {
		return x.DshortMin
	}
	return 0
}

func (x *Instrument) GetShortEnabledFlag() bool {
	if x != nil {
		return x.ShortEnabledFlag
	}
	return false
}

func (x *Instrument) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Instrument) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *Instrument) GetCountryOfRisk() string {
	if x != nil {
		return x.CountryOfRisk
	}
	return ""
}

func (x *Instrument) GetCountryOfRiskName() string {
	if x != nil {
		return x.CountryOfRiskName
	}
	return ""
}

func (x *Instrument) GetInstrumentType() string {
	if x != nil {
		return x.InstrumentType
	}
	return ""
}

func (x *Instrument) GetTradingStatus() SecurityTradingStatus {
	if x != nil {
		return x.TradingStatus
	}
	return SecurityTradingStatus_SECURITY_TRADING_STATUS_UNSPECIFIED
}

func (x *Instrument) GetOtcFlag() bool {
	if x != nil {
		return x.OtcFlag
	}
	return false
}

func (x *Instrument) GetBuyAvailableFlag() bool {
	if x != nil {
		return x.BuyAvailableFlag
	}
	return false
}

func (x *Instrument) GetSellAvailableFlag() bool {
	if x != nil {
		return x.SellAvailableFlag
	}
	return false
}

func (x *Instrument) GetMinPriceIncrement() float32 {
	if x != nil {
		return x.MinPriceIncrement
	}
	return 0
}

func (x *Instrument) GetApiTradeAvailableFlag() bool {
	if x != nil {
		return x.ApiTradeAvailableFlag
	}
	return false
}

type GetDividendsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Figi string                 `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"` //Figi-идентификатор инструмента.
	From *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"` //Начало запрашиваемого периода в часовом поясе UTC.
	To   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`     //Окончание запрашиваемого периода в часовом поясе UTC.
}

func (x *GetDividendsRequest) Reset() {
	*x = GetDividendsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDividendsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDividendsRequest) ProtoMessage() {}

func (x *GetDividendsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDividendsRequest.ProtoReflect.Descriptor instead.
func (*GetDividendsRequest) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{28}
}

func (x *GetDividendsRequest) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *GetDividendsRequest) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *GetDividendsRequest) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

type GetDividendsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dividends []*Dividend `protobuf:"bytes,1,rep,name=dividends,proto3" json:"dividends,omitempty"`
}

func (x *GetDividendsResponse) Reset() {
	*x = GetDividendsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDividendsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDividendsResponse) ProtoMessage() {}

func (x *GetDividendsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDividendsResponse.ProtoReflect.Descriptor instead.
func (*GetDividendsResponse) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{29}
}

func (x *GetDividendsResponse) GetDividends() []*Dividend {
	if x != nil {
		return x.Dividends
	}
	return nil
}

type Dividend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DividendNet  *MoneyValue            `protobuf:"bytes,1,opt,name=dividend_net,json=dividendNet,proto3" json:"dividend_net,omitempty"`    //Величина дивиденда на 1 ценную бумагу (включая валюту).
	PaymentDate  *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=payment_date,json=paymentDate,proto3" json:"payment_date,omitempty"`    //Дата фактических выплат.
	DeclaredDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=declared_date,json=declaredDate,proto3" json:"declared_date,omitempty"` //Дата объявления дивидендов.
	LastBuyDate  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=last_buy_date,json=lastBuyDate,proto3" json:"last_buy_date,omitempty"`  //Последний день (включительно) покупки для получения выплаты.
	DividendType string                 `protobuf:"bytes,5,opt,name=dividend_type,json=dividendType,proto3" json:"dividend_type,omitempty"` //Тип выплаты. Возможные значения: Regular Cash – регулярные выплаты, Cancelled – выплата отменена, Daily Accrual – ежедневное начисление, Return of Capital – возврат капитала, прочие типы выплат.
	RecordDate   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=record_date,json=recordDate,proto3" json:"record_date,omitempty"`       //Дата фиксации реестра
	Regularity   string                 `protobuf:"bytes,7,opt,name=regularity,proto3" json:"regularity,omitempty"`                         //Регулярность выплаты. Возможные значения: Annual – ежегодная, Semi-Anl – каждые полгода, прочие типы выплат.
	ClosePrice   *MoneyValue            `protobuf:"bytes,8,opt,name=close_price,json=closePrice,proto3" json:"close_price,omitempty"`       //Цена закрытия инструмента на момент ex_dividend_date.
	YieldValue   *Quotation             `protobuf:"bytes,9,opt,name=yield_value,json=yieldValue,proto3" json:"yield_value,omitempty"`       //Величина доходности.
	CreatedAt    *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`         //Дата и время создания записи.
}

func (x *Dividend) Reset() {
	*x = Dividend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instruments_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dividend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dividend) ProtoMessage() {}

func (x *Dividend) ProtoReflect() protoreflect.Message {
	mi := &file_instruments_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dividend.ProtoReflect.Descriptor instead.
func (*Dividend) Descriptor() ([]byte, []int) {
	return file_instruments_proto_rawDescGZIP(), []int{30}
}

func (x *Dividend) GetDividendNet() *MoneyValue {
	if x != nil {
		return x.DividendNet
	}
	return nil
}

func (x *Dividend) GetPaymentDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PaymentDate
	}
	return nil
}

func (x *Dividend) GetDeclaredDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DeclaredDate
	}
	return nil
}

func (x *Dividend) GetLastBuyDate() *timestamppb.Timestamp {
	if x != nil {
		return x.LastBuyDate
	}
	return nil
}

func (x *Dividend) GetDividendType() string {
	if x != nil {
		return x.DividendType
	}
	return ""
}

func (x *Dividend) GetRecordDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RecordDate
	}
	return nil
}

func (x *Dividend) GetRegularity() string {
	if x != nil {
		return x.Regularity
	}
	return ""
}

func (x *Dividend) GetClosePrice() *MoneyValue {
	if x != nil {
		return x.ClosePrice
	}
	return nil
}

func (x *Dividend) GetYieldValue() *Quotation {
	if x != nil {
		return x.YieldValue
	}
	return nil
}

func (x *Dividend) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

var File_instruments_proto protoreflect.FileDescriptor

var file_instruments_proto_rawDesc = []byte{
	0x0a, 0x11, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x25, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x91, 0x01, 0x0a, 0x17, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x6f, 0x22, 0x70, 0x0a,
	0x18, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x09, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x09, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22,
	0x74, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x45,
	0x0a, 0x04, 0x64, 0x61, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x52,
	0x04, 0x64, 0x61, 0x79, 0x73, 0x22, 0xf6, 0x02, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x44, 0x61, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73,
	0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x17,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x4d, 0x0a, 0x15, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x94,
	0x01, 0x0a, 0x11, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x07, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06,
	0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x7a, 0x0a, 0x12, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x64, 0x0a, 0x11, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x10, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x5b, 0x0a, 0x0c, 0x42, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f,
	0x6e, 0x64, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x5e,
	0x0a, 0x0d, 0x42, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4d, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6e,
	0x64, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x63,
	0x0a, 0x10, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x67, 0x0a, 0x12, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0b, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52,
	0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x59, 0x0a, 0x0b,
	0x45, 0x74, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x74, 0x66, 0x52, 0x0a, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x5c, 0x0a, 0x0c, 0x45, 0x74, 0x66, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x74, 0x66, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x5f, 0x0a, 0x0e, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x69,
	0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x62, 0x0a, 0x0f, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0b, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0b, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x5d, 0x0a, 0x0d, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0a, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x0a, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x60, 0x0a, 0x0e, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0b, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x0b,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xa5, 0x0c, 0x0a, 0x04,
	0x42, 0x6f, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x67, 0x69, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x67, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x73, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69,
	0x73, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6c, 0x6f, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x6b, 0x6c, 0x6f, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x6b, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6b, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x64, 0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x64, 0x6c, 0x6f, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x64, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x64, 0x6c, 0x6f, 0x6e, 0x67, 0x4d, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x64, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x79,
	0x65, 0x61, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x63, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x59, 0x65, 0x61, 0x72,
	0x12, 0x3f, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x4b, 0x0a, 0x07, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x40,
	0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x41, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x5a, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x4e, 0x0a, 0x09, 0x61, 0x63, 0x69, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x61, 0x63, 0x69, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x69,
	0x73, 0x6b, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x4f, 0x66, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x66,
	0x52, 0x69, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x70, 0x6c, 0x61,
	0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x63, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x74, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x74, 0x63, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6f,
	0x74, 0x63, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x75, 0x79, 0x5f, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x62, 0x75, 0x79, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x73, 0x65, 0x6c, 0x6c, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x70, 0x65, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x70, 0x65, 0x72, 0x70, 0x65, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2b, 0x0a,
	0x11, 0x61, 0x6d, 0x6f, 0x72, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x6d, 0x6f, 0x72, 0x74, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x69,
	0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x70,
	0x69, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61, 0x70,
	0x69, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x22, 0xa6, 0x07, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x67, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x66, 0x69, 0x67, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69,
	0x73, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x73, 0x69, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6c, 0x6f,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x6b, 0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x6b, 0x6c,
	0x6f, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x6b, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x6b, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64,
	0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x64, 0x6c, 0x6f, 0x6e,
	0x67, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x06, 0x64, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6c, 0x6f,
	0x6e, 0x67, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x6c,
	0x6f, 0x6e, 0x67, 0x4d, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x64, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x46,
	0x6c, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x07, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x72,
	0x69, 0x73, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x4f, 0x66, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f,
	0x66, 0x52, 0x69, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x63, 0x0a, 0x0e, 0x74, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3c, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0d, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x74, 0x63, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x6f, 0x74, 0x63, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x75, 0x79,
	0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x62, 0x75, 0x79, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x65, 0x6c, 0x6c, 0x5f,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x65, 0x6c, 0x6c, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x6f, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x69, 0x73, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x11, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x70, 0x69, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61, 0x70, 0x69, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x95, 0x08, 0x0a,
	0x03, 0x45, 0x74, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x67, 0x69, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x67, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x73, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69,
	0x73, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6c, 0x6f, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x6b, 0x6c, 0x6f, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x6b, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6b, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x64, 0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x64, 0x6c, 0x6f, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x64, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x64, 0x6c, 0x6f, 0x6e, 0x67, 0x4d, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x64, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6f, 0x66, 0x5f,
	0x72, 0x69, 0x73, 0x6b, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x4f, 0x66, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x4f, 0x66, 0x52, 0x69, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e,
	0x67, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65, 0x71, 0x12, 0x63, 0x0a,
	0x0e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x74, 0x63, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6f, 0x74, 0x63, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2c, 0x0a,
	0x12, 0x62, 0x75, 0x79, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x62, 0x75, 0x79, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x73,
	0x65, 0x6c, 0x6c, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x65, 0x6c, 0x6c, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x6d,
	0x69, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x61,
	0x70, 0x69, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61,
	0x70, 0x69, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x22, 0x8b, 0x09, 0x0a, 0x06, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x69, 0x67, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66,
	0x69, 0x67, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6c, 0x6f, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x6c, 0x6f, 0x6e,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x6b, 0x6c, 0x6f, 0x6e, 0x67, 0x12, 0x16,
	0x0a, 0x06, 0x6b, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06,
	0x6b, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6c, 0x6f, 0x6e, 0x67, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x64, 0x6c, 0x6f, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x64, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x6d, 0x69,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x6c, 0x6f, 0x6e, 0x67, 0x4d, 0x69,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x64, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4d, 0x69, 0x6e,
	0x12, 0x2c, 0x0a, 0x12, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x44,
	0x0a, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x75, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61,
	0x73, 0x69, 0x63, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x62, 0x61, 0x73, 0x69, 0x63, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x62,
	0x61, 0x73, 0x69, 0x63, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x62, 0x61, 0x73, 0x69, 0x63, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x66, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x2f, 0x0a,
	0x14, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x69, 0x73, 0x6b,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x4f, 0x66, 0x52, 0x69, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x63, 0x0a, 0x0e, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x74, 0x63, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x6f, 0x74, 0x63, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2c, 0x0a, 0x12, 0x62,
	0x75, 0x79, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x62, 0x75, 0x79, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x65, 0x6c,
	0x6c, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x65, 0x6c, 0x6c, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x69, 0x6e,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x70, 0x69,
	0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61, 0x70, 0x69,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x22, 0x84, 0x09, 0x0a, 0x05, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x69, 0x67, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x67, 0x69,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x69, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x73, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6c,
	0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6c, 0x6f, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x6c, 0x6f,
	0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x6b, 0x6c, 0x6f, 0x6e, 0x67, 0x12,
	0x16, 0x0a, 0x06, 0x6b, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x6b, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6c, 0x6f, 0x6e, 0x67,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x64, 0x6c, 0x6f, 0x6e, 0x67, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x64,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x6d,
	0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x6c, 0x6f, 0x6e, 0x67, 0x4d,
	0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x69, 0x6e,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x64, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4d, 0x69,
	0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x35, 0x0a, 0x08, 0x69, 0x70, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x69,
	0x70, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x66, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x2f, 0x0a,
	0x14, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x69, 0x73, 0x6b,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x4f, 0x66, 0x52, 0x69, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x4b,
	0x0a, 0x07, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x07, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x63, 0x0a, 0x0e, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x74, 0x63, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x6f, 0x74, 0x63, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2c, 0x0a, 0x12, 0x62,
	0x75, 0x79, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x62, 0x75, 0x79, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x65, 0x6c,
	0x6c, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x65, 0x6c, 0x6c, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x69, 0x76,
	0x5f, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x64, 0x69, 0x76, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x4f, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x6d,
	0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x37, 0x0a, 0x18, 0x61, 0x70, 0x69, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x15, 0x61, 0x70, 0x69, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x8c, 0x01, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x72, 0x75, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x67, 0x69,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x67, 0x69, 0x12, 0x2e, 0x0a, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2a, 0x0a, 0x02,
	0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x6f, 0x22, 0x82, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x41, 0x63, 0x63, 0x72, 0x75, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x72,
	0x75, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x72,
	0x75, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x10, 0x61, 0x63, 0x63,
	0x72, 0x75, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x73, 0x22, 0xfa, 0x01,
	0x0a, 0x0f, 0x41, 0x63, 0x63, 0x72, 0x75, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x4a,
	0x0a, 0x07, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x22, 0x2d, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x73, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x67, 0x69, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x67, 0x69, 0x22, 0xe8, 0x01, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x73, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x15, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4f, 0x6e, 0x42, 0x75, 0x79, 0x12, 0x66, 0x0a, 0x16,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x13, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4f, 0x6e,
	0x53, 0x65, 0x6c, 0x6c, 0x22, 0x67, 0x0a, 0x12, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xd8, 0x06,
	0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x69, 0x67, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x67, 0x69,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x69, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x73, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6c,
	0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6c, 0x6f, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x6c, 0x6f,
	0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x6b, 0x6c, 0x6f, 0x6e, 0x67, 0x12,
	0x16, 0x0a, 0x06, 0x6b, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x6b, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6c, 0x6f, 0x6e, 0x67,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x64, 0x6c, 0x6f, 0x6e, 0x67, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x64,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x6d,
	0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x6c, 0x6f, 0x6e, 0x67, 0x4d,
	0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x69, 0x6e,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x64, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4d, 0x69,
	0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x69,
	0x73, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x4f, 0x66, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x66,
	0x52, 0x69, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x63, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x74, 0x63, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6f, 0x74, 0x63, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x75, 0x79, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x62,
	0x75, 0x79, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x2e, 0x0a, 0x13, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x65,
	0x6c, 0x6c, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x2e, 0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x6d, 0x69,
	0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x37, 0x0a, 0x18, 0x61, 0x70, 0x69, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x15, 0x61, 0x70, 0x69, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x85, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x67, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x66, 0x69, 0x67, 0x69, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x6f,
	0x22, 0x65, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x09, 0x64, 0x69, 0x76, 0x69,
	0x64, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x74, 0x69,
	0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x52, 0x09, 0x64, 0x69,
	0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x22, 0x84, 0x05, 0x0a, 0x08, 0x44, 0x69, 0x76, 0x69,
	0x64, 0x65, 0x6e, 0x64, 0x12, 0x54, 0x0a, 0x0c, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64,
	0x5f, 0x6e, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e,
	0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64,
	0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x4e, 0x65, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x64, 0x65, 0x63,
	0x6c, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x64, 0x65,
	0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x62, 0x75, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c,
	0x61, 0x73, 0x74, 0x42, 0x75, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69,
	0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x52, 0x0a, 0x0b,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x51, 0x0a, 0x0b, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x2a, 0x6d,
	0x0a, 0x10, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x47, 0x49, 0x10, 0x01, 0x12, 0x1d,
	0x0a, 0x19, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x52, 0x10, 0x02, 0x2a, 0x6c, 0x0a,
	0x10, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x01,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x02, 0x2a, 0xe5, 0x01, 0x0a, 0x09,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x48, 0x41,
	0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14,
	0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x45,
	0x52, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x52, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x48,
	0x41, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x44, 0x52, 0x10, 0x04, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4c, 0x50,
	0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4e, 0x59, 0x5f, 0x52, 0x45, 0x47, 0x5f, 0x53, 0x48, 0x52, 0x53, 0x10, 0x06, 0x12, 0x1e,
	0x0a, 0x1a, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4c, 0x4f,
	0x53, 0x45, 0x44, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x10, 0x07, 0x12, 0x13,
	0x0a, 0x0f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x49,
	0x54, 0x10, 0x08, 0x32, 0xcc, 0x0f, 0x0a, 0x12, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x10, 0x54,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x3e, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3f, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x77, 0x0a, 0x06, 0x42, 0x6f, 0x6e, 0x64, 0x42, 0x79, 0x12, 0x38, 0x2e, 0x74, 0x69, 0x6e,
	0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x05, 0x42, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x39, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e,
	0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x7f, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42,
	0x79, 0x12, 0x38, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x74, 0x69,
	0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x12, 0x39, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x05, 0x45, 0x74, 0x66,
	0x42, 0x79, 0x12, 0x38, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x74, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x76, 0x0a, 0x04, 0x45, 0x74, 0x66, 0x73, 0x12, 0x39, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f,
	0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x74, 0x66, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x08, 0x46, 0x75, 0x74, 0x75,
	0x72, 0x65, 0x42, 0x79, 0x12, 0x38, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x07, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x12, 0x39, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x74, 0x69,
	0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x07, 0x53, 0x68, 0x61, 0x72, 0x65, 0x42, 0x79, 0x12, 0x38,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f,
	0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a,
	0x0a, 0x06, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x39, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f,
	0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9c, 0x01, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x63, 0x72, 0x75, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x73, 0x12, 0x41, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63,
	0x63, 0x72, 0x75, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x72, 0x75, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x73, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x3e,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x86, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x79, 0x12, 0x38, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e,
	0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74,
	0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x3a, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x66, 0x0a, 0x1c, 0x72, 0x75, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66,
	0x2e, 0x70, 0x69, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x50, 0x01, 0x5a, 0x11, 0x54, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2f, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x41, 0x50, 0x49, 0xa2, 0x02, 0x05, 0x54, 0x49, 0x41, 0x50, 0x49, 0xaa,
	0x02, 0x14, 0x54, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x41, 0x50, 0x49, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x11, 0x54, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66,
	0x5c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x5c, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_instruments_proto_rawDescOnce sync.Once
	file_instruments_proto_rawDescData = file_instruments_proto_rawDesc
)

func file_instruments_proto_rawDescGZIP() []byte {
	file_instruments_proto_rawDescOnce.Do(func() {
		file_instruments_proto_rawDescData = protoimpl.X.CompressGZIP(file_instruments_proto_rawDescData)
	})
	return file_instruments_proto_rawDescData
}

var file_instruments_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_instruments_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_instruments_proto_goTypes = []interface{}{
	(InstrumentIdType)(0),               // 0: tinkoff.public.invest.api.contract.v1.InstrumentIdType
	(InstrumentStatus)(0),               // 1: tinkoff.public.invest.api.contract.v1.InstrumentStatus
	(ShareType)(0),                      // 2: tinkoff.public.invest.api.contract.v1.ShareType
	(*TradingSchedulesRequest)(nil),     // 3: tinkoff.public.invest.api.contract.v1.TradingSchedulesRequest
	(*TradingSchedulesResponse)(nil),    // 4: tinkoff.public.invest.api.contract.v1.TradingSchedulesResponse
	(*TradingSchedule)(nil),             // 5: tinkoff.public.invest.api.contract.v1.TradingSchedule
	(*TradingDay)(nil),                  // 6: tinkoff.public.invest.api.contract.v1.TradingDay
	(*InstrumentRequest)(nil),           // 7: tinkoff.public.invest.api.contract.v1.InstrumentRequest
	(*InstrumentsRequest)(nil),          // 8: tinkoff.public.invest.api.contract.v1.InstrumentsRequest
	(*BondResponse)(nil),                // 9: tinkoff.public.invest.api.contract.v1.BondResponse
	(*BondsResponse)(nil),               // 10: tinkoff.public.invest.api.contract.v1.BondsResponse
	(*CurrencyResponse)(nil),            // 11: tinkoff.public.invest.api.contract.v1.CurrencyResponse
	(*CurrenciesResponse)(nil),          // 12: tinkoff.public.invest.api.contract.v1.CurrenciesResponse
	(*EtfResponse)(nil),                 // 13: tinkoff.public.invest.api.contract.v1.EtfResponse
	(*EtfsResponse)(nil),                // 14: tinkoff.public.invest.api.contract.v1.EtfsResponse
	(*FutureResponse)(nil),              // 15: tinkoff.public.invest.api.contract.v1.FutureResponse
	(*FuturesResponse)(nil),             // 16: tinkoff.public.invest.api.contract.v1.FuturesResponse
	(*ShareResponse)(nil),               // 17: tinkoff.public.invest.api.contract.v1.ShareResponse
	(*SharesResponse)(nil),              // 18: tinkoff.public.invest.api.contract.v1.SharesResponse
	(*Bond)(nil),                        // 19: tinkoff.public.invest.api.contract.v1.Bond
	(*Currency)(nil),                    // 20: tinkoff.public.invest.api.contract.v1.Currency
	(*Etf)(nil),                         // 21: tinkoff.public.invest.api.contract.v1.Etf
	(*Future)(nil),                      // 22: tinkoff.public.invest.api.contract.v1.Future
	(*Share)(nil),                       // 23: tinkoff.public.invest.api.contract.v1.Share
	(*GetAccruedInterestsRequest)(nil),  // 24: tinkoff.public.invest.api.contract.v1.GetAccruedInterestsRequest
	(*GetAccruedInterestsResponse)(nil), // 25: tinkoff.public.invest.api.contract.v1.GetAccruedInterestsResponse
	(*AccruedInterest)(nil),             // 26: tinkoff.public.invest.api.contract.v1.AccruedInterest
	(*GetFuturesMarginRequest)(nil),     // 27: tinkoff.public.invest.api.contract.v1.GetFuturesMarginRequest
	(*GetFuturesMarginResponse)(nil),    // 28: tinkoff.public.invest.api.contract.v1.GetFuturesMarginResponse
	(*InstrumentResponse)(nil),          // 29: tinkoff.public.invest.api.contract.v1.InstrumentResponse
	(*Instrument)(nil),                  // 30: tinkoff.public.invest.api.contract.v1.Instrument
	(*GetDividendsRequest)(nil),         // 31: tinkoff.public.invest.api.contract.v1.GetDividendsRequest
	(*GetDividendsResponse)(nil),        // 32: tinkoff.public.invest.api.contract.v1.GetDividendsResponse
	(*Dividend)(nil),                    // 33: tinkoff.public.invest.api.contract.v1.Dividend
	(*timestamppb.Timestamp)(nil),       // 34: google.protobuf.Timestamp
	(*MoneyValue)(nil),                  // 35: tinkoff.public.invest.api.contract.v1.MoneyValue
	(SecurityTradingStatus)(0),          // 36: tinkoff.public.invest.api.contract.v1.SecurityTradingStatus
	(*Quotation)(nil),                   // 37: tinkoff.public.invest.api.contract.v1.Quotation
}
var file_instruments_proto_depIdxs = []int32{
	34, // 0: tinkoff.public.invest.api.contract.v1.TradingSchedulesRequest.from:type_name -> google.protobuf.Timestamp
	34, // 1: tinkoff.public.invest.api.contract.v1.TradingSchedulesRequest.to:type_name -> google.protobuf.Timestamp
	5,  // 2: tinkoff.public.invest.api.contract.v1.TradingSchedulesResponse.exchanges:type_name -> tinkoff.public.invest.api.contract.v1.TradingSchedule
	6,  // 3: tinkoff.public.invest.api.contract.v1.TradingSchedule.days:type_name -> tinkoff.public.invest.api.contract.v1.TradingDay
	34, // 4: tinkoff.public.invest.api.contract.v1.TradingDay.date:type_name -> google.protobuf.Timestamp
	34, // 5: tinkoff.public.invest.api.contract.v1.TradingDay.start_time:type_name -> google.protobuf.Timestamp
	34, // 6: tinkoff.public.invest.api.contract.v1.TradingDay.end_time:type_name -> google.protobuf.Timestamp
	34, // 7: tinkoff.public.invest.api.contract.v1.TradingDay.market_order_start_time:type_name -> google.protobuf.Timestamp
	34, // 8: tinkoff.public.invest.api.contract.v1.TradingDay.market_order_end_time:type_name -> google.protobuf.Timestamp
	0,  // 9: tinkoff.public.invest.api.contract.v1.InstrumentRequest.id_type:type_name -> tinkoff.public.invest.api.contract.v1.InstrumentIdType
	1,  // 10: tinkoff.public.invest.api.contract.v1.InstrumentsRequest.instrument_status:type_name -> tinkoff.public.invest.api.contract.v1.InstrumentStatus
	19, // 11: tinkoff.public.invest.api.contract.v1.BondResponse.instrument:type_name -> tinkoff.public.invest.api.contract.v1.Bond
	19, // 12: tinkoff.public.invest.api.contract.v1.BondsResponse.instruments:type_name -> tinkoff.public.invest.api.contract.v1.Bond
	20, // 13: tinkoff.public.invest.api.contract.v1.CurrencyResponse.instrument:type_name -> tinkoff.public.invest.api.contract.v1.Currency
	20, // 14: tinkoff.public.invest.api.contract.v1.CurrenciesResponse.instruments:type_name -> tinkoff.public.invest.api.contract.v1.Currency
	21, // 15: tinkoff.public.invest.api.contract.v1.EtfResponse.instrument:type_name -> tinkoff.public.invest.api.contract.v1.Etf
	21, // 16: tinkoff.public.invest.api.contract.v1.EtfsResponse.instruments:type_name -> tinkoff.public.invest.api.contract.v1.Etf
	22, // 17: tinkoff.public.invest.api.contract.v1.FutureResponse.instrument:type_name -> tinkoff.public.invest.api.contract.v1.Future
	22, // 18: tinkoff.public.invest.api.contract.v1.FuturesResponse.instruments:type_name -> tinkoff.public.invest.api.contract.v1.Future
	23, // 19: tinkoff.public.invest.api.contract.v1.ShareResponse.instrument:type_name -> tinkoff.public.invest.api.contract.v1.Share
	23, // 20: tinkoff.public.invest.api.contract.v1.SharesResponse.instruments:type_name -> tinkoff.public.invest.api.contract.v1.Share
	34, // 21: tinkoff.public.invest.api.contract.v1.Bond.maturity_date:type_name -> google.protobuf.Timestamp
	35, // 22: tinkoff.public.invest.api.contract.v1.Bond.nominal:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	34, // 23: tinkoff.public.invest.api.contract.v1.Bond.state_reg_date:type_name -> google.protobuf.Timestamp
	34, // 24: tinkoff.public.invest.api.contract.v1.Bond.placement_date:type_name -> google.protobuf.Timestamp
	35, // 25: tinkoff.public.invest.api.contract.v1.Bond.placement_price:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	35, // 26: tinkoff.public.invest.api.contract.v1.Bond.aci_value:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	36, // 27: tinkoff.public.invest.api.contract.v1.Bond.trading_status:type_name -> tinkoff.public.invest.api.contract.v1.SecurityTradingStatus
	35, // 28: tinkoff.public.invest.api.contract.v1.Currency.nominal:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	36, // 29: tinkoff.public.invest.api.contract.v1.Currency.trading_status:type_name -> tinkoff.public.invest.api.contract.v1.SecurityTradingStatus
	34, // 30: tinkoff.public.invest.api.contract.v1.Etf.released_date:type_name -> google.protobuf.Timestamp
	36, // 31: tinkoff.public.invest.api.contract.v1.Etf.trading_status:type_name -> tinkoff.public.invest.api.contract.v1.SecurityTradingStatus
	34, // 32: tinkoff.public.invest.api.contract.v1.Future.first_trade_date:type_name -> google.protobuf.Timestamp
	34, // 33: tinkoff.public.invest.api.contract.v1.Future.last_trade_date:type_name -> google.protobuf.Timestamp
	34, // 34: tinkoff.public.invest.api.contract.v1.Future.expiration_date:type_name -> google.protobuf.Timestamp
	36, // 35: tinkoff.public.invest.api.contract.v1.Future.trading_status:type_name -> tinkoff.public.invest.api.contract.v1.SecurityTradingStatus
	34, // 36: tinkoff.public.invest.api.contract.v1.Share.ipo_date:type_name -> google.protobuf.Timestamp
	35, // 37: tinkoff.public.invest.api.contract.v1.Share.nominal:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	36, // 38: tinkoff.public.invest.api.contract.v1.Share.trading_status:type_name -> tinkoff.public.invest.api.contract.v1.SecurityTradingStatus
	2,  // 39: tinkoff.public.invest.api.contract.v1.Share.share_type:type_name -> tinkoff.public.invest.api.contract.v1.ShareType
	34, // 40: tinkoff.public.invest.api.contract.v1.GetAccruedInterestsRequest.from:type_name -> google.protobuf.Timestamp
	34, // 41: tinkoff.public.invest.api.contract.v1.GetAccruedInterestsRequest.to:type_name -> google.protobuf.Timestamp
	26, // 42: tinkoff.public.invest.api.contract.v1.GetAccruedInterestsResponse.accrued_interests:type_name -> tinkoff.public.invest.api.contract.v1.AccruedInterest
	34, // 43: tinkoff.public.invest.api.contract.v1.AccruedInterest.date:type_name -> google.protobuf.Timestamp
	37, // 44: tinkoff.public.invest.api.contract.v1.AccruedInterest.value:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	37, // 45: tinkoff.public.invest.api.contract.v1.AccruedInterest.nominal:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	35, // 46: tinkoff.public.invest.api.contract.v1.GetFuturesMarginResponse.initial_margin_on_buy:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	35, // 47: tinkoff.public.invest.api.contract.v1.GetFuturesMarginResponse.initial_margin_on_sell:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	30, // 48: tinkoff.public.invest.api.contract.v1.InstrumentResponse.instrument:type_name -> tinkoff.public.invest.api.contract.v1.Instrument
	36, // 49: tinkoff.public.invest.api.contract.v1.Instrument.trading_status:type_name -> tinkoff.public.invest.api.contract.v1.SecurityTradingStatus
	34, // 50: tinkoff.public.invest.api.contract.v1.GetDividendsRequest.from:type_name -> google.protobuf.Timestamp
	34, // 51: tinkoff.public.invest.api.contract.v1.GetDividendsRequest.to:type_name -> google.protobuf.Timestamp
	33, // 52: tinkoff.public.invest.api.contract.v1.GetDividendsResponse.dividends:type_name -> tinkoff.public.invest.api.contract.v1.Dividend
	35, // 53: tinkoff.public.invest.api.contract.v1.Dividend.dividend_net:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	34, // 54: tinkoff.public.invest.api.contract.v1.Dividend.payment_date:type_name -> google.protobuf.Timestamp
	34, // 55: tinkoff.public.invest.api.contract.v1.Dividend.declared_date:type_name -> google.protobuf.Timestamp
	34, // 56: tinkoff.public.invest.api.contract.v1.Dividend.last_buy_date:type_name -> google.protobuf.Timestamp
	34, // 57: tinkoff.public.invest.api.contract.v1.Dividend.record_date:type_name -> google.protobuf.Timestamp
	35, // 58: tinkoff.public.invest.api.contract.v1.Dividend.close_price:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	37, // 59: tinkoff.public.invest.api.contract.v1.Dividend.yield_value:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	34, // 60: tinkoff.public.invest.api.contract.v1.Dividend.created_at:type_name -> google.protobuf.Timestamp
	3,  // 61: tinkoff.public.invest.api.contract.v1.InstrumentsService.TradingSchedules:input_type -> tinkoff.public.invest.api.contract.v1.TradingSchedulesRequest
	7,  // 62: tinkoff.public.invest.api.contract.v1.InstrumentsService.BondBy:input_type -> tinkoff.public.invest.api.contract.v1.InstrumentRequest
	8,  // 63: tinkoff.public.invest.api.contract.v1.InstrumentsService.Bonds:input_type -> tinkoff.public.invest.api.contract.v1.InstrumentsRequest
	7,  // 64: tinkoff.public.invest.api.contract.v1.InstrumentsService.CurrencyBy:input_type -> tinkoff.public.invest.api.contract.v1.InstrumentRequest
	8,  // 65: tinkoff.public.invest.api.contract.v1.InstrumentsService.Currencies:input_type -> tinkoff.public.invest.api.contract.v1.InstrumentsRequest
	7,  // 66: tinkoff.public.invest.api.contract.v1.InstrumentsService.EtfBy:input_type -> tinkoff.public.invest.api.contract.v1.InstrumentRequest
	8,  // 67: tinkoff.public.invest.api.contract.v1.InstrumentsService.Etfs:input_type -> tinkoff.public.invest.api.contract.v1.InstrumentsRequest
	7,  // 68: tinkoff.public.invest.api.contract.v1.InstrumentsService.FutureBy:input_type -> tinkoff.public.invest.api.contract.v1.InstrumentRequest
	8,  // 69: tinkoff.public.invest.api.contract.v1.InstrumentsService.Futures:input_type -> tinkoff.public.invest.api.contract.v1.InstrumentsRequest
	7,  // 70: tinkoff.public.invest.api.contract.v1.InstrumentsService.ShareBy:input_type -> tinkoff.public.invest.api.contract.v1.InstrumentRequest
	8,  // 71: tinkoff.public.invest.api.contract.v1.InstrumentsService.Shares:input_type -> tinkoff.public.invest.api.contract.v1.InstrumentsRequest
	24, // 72: tinkoff.public.invest.api.contract.v1.InstrumentsService.GetAccruedInterests:input_type -> tinkoff.public.invest.api.contract.v1.GetAccruedInterestsRequest
	27, // 73: tinkoff.public.invest.api.contract.v1.InstrumentsService.GetFuturesMargin:input_type -> tinkoff.public.invest.api.contract.v1.GetFuturesMarginRequest
	7,  // 74: tinkoff.public.invest.api.contract.v1.InstrumentsService.GetInstrumentBy:input_type -> tinkoff.public.invest.api.contract.v1.InstrumentRequest
	31, // 75: tinkoff.public.invest.api.contract.v1.InstrumentsService.GetDividends:input_type -> tinkoff.public.invest.api.contract.v1.GetDividendsRequest
	4,  // 76: tinkoff.public.invest.api.contract.v1.InstrumentsService.TradingSchedules:output_type -> tinkoff.public.invest.api.contract.v1.TradingSchedulesResponse
	9,  // 77: tinkoff.public.invest.api.contract.v1.InstrumentsService.BondBy:output_type -> tinkoff.public.invest.api.contract.v1.BondResponse
	10, // 78: tinkoff.public.invest.api.contract.v1.InstrumentsService.Bonds:output_type -> tinkoff.public.invest.api.contract.v1.BondsResponse
	11, // 79: tinkoff.public.invest.api.contract.v1.InstrumentsService.CurrencyBy:output_type -> tinkoff.public.invest.api.contract.v1.CurrencyResponse
	12, // 80: tinkoff.public.invest.api.contract.v1.InstrumentsService.Currencies:output_type -> tinkoff.public.invest.api.contract.v1.CurrenciesResponse
	13, // 81: tinkoff.public.invest.api.contract.v1.InstrumentsService.EtfBy:output_type -> tinkoff.public.invest.api.contract.v1.EtfResponse
	14, // 82: tinkoff.public.invest.api.contract.v1.InstrumentsService.Etfs:output_type -> tinkoff.public.invest.api.contract.v1.EtfsResponse
	15, // 83: tinkoff.public.invest.api.contract.v1.InstrumentsService.FutureBy:output_type -> tinkoff.public.invest.api.contract.v1.FutureResponse
	16, // 84: tinkoff.public.invest.api.contract.v1.InstrumentsService.Futures:output_type -> tinkoff.public.invest.api.contract.v1.FuturesResponse
	17, // 85: tinkoff.public.invest.api.contract.v1.InstrumentsService.ShareBy:output_type -> tinkoff.public.invest.api.contract.v1.ShareResponse
	18, // 86: tinkoff.public.invest.api.contract.v1.InstrumentsService.Shares:output_type -> tinkoff.public.invest.api.contract.v1.SharesResponse
	25, // 87: tinkoff.public.invest.api.contract.v1.InstrumentsService.GetAccruedInterests:output_type -> tinkoff.public.invest.api.contract.v1.GetAccruedInterestsResponse
	28, // 88: tinkoff.public.invest.api.contract.v1.InstrumentsService.GetFuturesMargin:output_type -> tinkoff.public.invest.api.contract.v1.GetFuturesMarginResponse
	29, // 89: tinkoff.public.invest.api.contract.v1.InstrumentsService.GetInstrumentBy:output_type -> tinkoff.public.invest.api.contract.v1.InstrumentResponse
	32, // 90: tinkoff.public.invest.api.contract.v1.InstrumentsService.GetDividends:output_type -> tinkoff.public.invest.api.contract.v1.GetDividendsResponse
	76, // [76:91] is the sub-list for method output_type
	61, // [61:76] is the sub-list for method input_type
	61, // [61:61] is the sub-list for extension type_name
	61, // [61:61] is the sub-list for extension extendee
	0,  // [0:61] is the sub-list for field type_name
}

func init() { file_instruments_proto_init() }
func file_instruments_proto_init() {
	if File_instruments_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_instruments_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradingSchedulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradingSchedulesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradingSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradingDay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BondResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BondsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrenciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EtfResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EtfsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FutureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuturesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bond); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Currency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Etf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Future); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Share); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccruedInterestsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccruedInterestsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccruedInterest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFuturesMarginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFuturesMarginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Instrument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDividendsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDividendsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instruments_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dividend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_instruments_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_instruments_proto_goTypes,
		DependencyIndexes: file_instruments_proto_depIdxs,
		EnumInfos:         file_instruments_proto_enumTypes,
		MessageInfos:      file_instruments_proto_msgTypes,
	}.Build()
	File_instruments_proto = out.File
	file_instruments_proto_rawDesc = nil
	file_instruments_proto_goTypes = nil
	file_instruments_proto_depIdxs = nil
}
